attributes:
- default_value: null
  description: Blocks of [blocksize, blocksize] are moved.
  name: blocksize
  required: true
  type: AttrType.INT
- default_value: DCR
  description: DCR (default) for depth-column-row order re-arrangement. Use CRD for
    column-row-depth order.
  name: mode
  required: false
  type: AttrType.STRING
deprecated: false
doc: 'DepthToSpace rearranges (permutes) data from depth into blocks of spatial data.

  This is the reverse transformation of SpaceToDepth. More specifically, this op outputs
  a copy of

  the input tensor where values from the depth dimension are moved in spatial blocks
  to the height

  and width dimensions. By default, `mode` = `DCR`.

  In the DCR mode, elements along the depth dimension from the input tensor are rearranged
  in the

  following order: depth, column, and then row. The output y is computed from the
  input x as below:


  b, c, h, w = x.shape


  tmp = np.reshape(x, [b, blocksize, blocksize, c // (blocksize**2), h, w])


  tmp = np.transpose(tmp, [0, 3, 4, 1, 5, 2])


  y = np.reshape(tmp, [b, c // (blocksize**2), h * blocksize, w * blocksize])



  In the CRD mode, elements along the depth dimension from the input tensor are rearranged
  in the

  following order: column, row, and the depth. The output y is computed from the input
  x as below:


  b, c, h, w = x.shape


  tmp = np.reshape(x, [b, c // (blocksize ** 2), blocksize, blocksize, h, w])


  tmp = np.transpose(tmp, [0, 1, 4, 2, 5, 3])


  y = np.reshape(tmp, [b, c // (blocksize ** 2), h * blocksize, w * blocksize])


  '
domain: ''
inputs:
- description: Input tensor of [N,C,H,W], where N is the batch axis, C is the channel
    or depth, H is the height and W is the width.
  min_arity: 1
  name: input
  tags: []
  type_str: T
max_input: 1
max_output: 1
min_input: 1
min_output: 1
name: DepthToSpace
outputs:
- description: Output tensor of [N, C/(blocksize * blocksize), H * blocksize, W *
    blocksize].
  min_arity: 1
  name: output
  tags: []
  type_str: T
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Constrain input and output types to all tensor types.
  type_param_str: T
