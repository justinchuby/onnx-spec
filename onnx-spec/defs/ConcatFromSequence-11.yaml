attributes:
- default_value: null
  description: 'Which axis to concat on. Accepted range in `[-r, r - 1]`, where `r`
    is the rank of input tensors. When `new_axis` is 1, accepted range is `[-r - 1,
    r]`. '
  name: axis
  required: true
  type: AttrType.INT
- default_value: 0
  description: Insert and concatenate on a new axis or not, default 0 means do not
    insert new axis.
  name: new_axis
  required: false
  type: AttrType.INT
deprecated: false
doc: '

  Concatenate a sequence of tensors into a single tensor.

  All input tensors must have the same shape, except for the dimension size of the
  axis to concatenate on.

  By default ''new_axis'' is 0, the behavior is similar to numpy.concatenate.

  When ''new_axis'' is 1, the behavior is similar to numpy.stack.

  '
domain: ''
inputs:
- description: Sequence of tensors for concatenation
  min_arity: 1
  name: input_sequence
  tags: []
  type_str: S
max_input: 1
max_output: 1
min_input: 1
min_output: 1
name: ConcatFromSequence
outputs:
- description: Concatenated tensor
  min_arity: 1
  name: concat_result
  tags: []
  type_str: T
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - seq(tensor(uint8))
  - seq(tensor(uint16))
  - seq(tensor(uint32))
  - seq(tensor(uint64))
  - seq(tensor(int8))
  - seq(tensor(int16))
  - seq(tensor(int32))
  - seq(tensor(int64))
  - seq(tensor(float16))
  - seq(tensor(float))
  - seq(tensor(double))
  - seq(tensor(string))
  - seq(tensor(bool))
  - seq(tensor(complex64))
  - seq(tensor(complex128))
  description: Constrain input types to any tensor type.
  type_param_str: S
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Constrain output types to any tensor type.
  type_param_str: T
