domain: ''
name: BatchNormalization
since_version: 7
min_input: 5
max_input: 5
min_output: 1
max_output: 5
doc: "\nCarries out batch normalization as described in the paper\nhttps://arxiv.org/abs/1502.03167.\
  \ Depending on the mode it is being run,\nthere are multiple cases for the number\
  \ of outputs, which we list below:\n\nOutput case #1: Y, mean, var, saved_mean,\
  \ saved_var (training mode)\nOutput case #2: Y (test mode)\n    This operator has\
  \ **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation\
  \ of optional arguments. An empty string may be used in the place of an actual argument's\
  \ name to indicate a missing argument. Trailing optional arguments (those not followed\
  \ by an argument that is present) may also be simply omitted.\n"
attributes:
- name: epsilon
  description: The epsilon value to use to avoid division by zero.
  type: AttrType.FLOAT
  required: false
  default_value: 9.999999747378752e-06
- name: momentum
  description: Factor used in computing the running mean and variance.e.g., running_mean
    = running_mean * momentum + mean * (1 - momentum).
  type: AttrType.FLOAT
  required: false
  default_value: 0.8999999761581421
- name: spatial
  description: If true, compute the mean and variance across per activation. If false,
    compute the mean and variance across per feature over each mini-batch.
  type: AttrType.INT
  required: false
  default_value: 1
inputs:
- name: X
  type_str: T
  description: Input data tensor from the previous operator; dimensions for image
    case are (N x C x H x W), where N is the batch size, C is the number of channels,
    and H and W are the height and the width of the data. For non image case, the
    dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.
  min_arity: 1
  tags: []
- name: scale
  type_str: T
  description: If spatial is true, the dimension of scale is (C). If spatial is false,
    the dimensions of scale are (C x D1 x ... x Dn)
  min_arity: 1
  tags: []
- name: B
  type_str: T
  description: If spatial is true, the dimension of bias is (C). If spatial is false,
    the dimensions of bias are (C x D1 x ... x Dn)
  min_arity: 1
  tags: []
- name: mean
  type_str: T
  description: If spatial is true, the dimension of the running mean (training) or
    the estimated mean (testing) is (C). If spatial is false, the dimensions of the
    running mean (training) or the estimated mean (testing) are (C x D1 x ... x Dn).
  min_arity: 1
  tags: []
- name: var
  type_str: T
  description: If spatial is true, the dimension of the running variance(training)
    or the estimated variance (testing) is (C). If spatial is false, the dimensions
    of the running variance(training) or the estimated variance (testing) are (C x
    D1 x ... x Dn).
  min_arity: 1
  tags: []
outputs:
- name: Y
  type_str: T
  description: The output tensor of the same shape as X
  min_arity: 1
  tags: []
- name: mean
  type_str: T
  description: The running mean after the BatchNormalization operator.
  min_arity: 1
  tags:
  - optional
- name: var
  type_str: T
  description: The running variance after the BatchNormalization operator.
  min_arity: 1
  tags:
  - optional
- name: saved_mean
  type_str: T
  description: Saved mean used during training to speed up gradient computation.
  min_arity: 1
  tags:
  - optional
- name: saved_var
  type_str: T
  description: Saved variance used during training to speed up gradient computation.
  min_arity: 1
  tags:
  - optional
type_constraints:
- type_param_str: T
  description: Constrain input and output types to float tensors.
  allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
support_level: COMMON
deprecated: false
