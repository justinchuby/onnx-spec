attributes:
- default_value: null
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.For example with
    LeakyRelu, the default alpha is 0.01.
  name: activation_alpha
  required: false
  type: AttrType.FLOATS
- default_value: null
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.
  name: activation_beta
  required: false
  type: AttrType.FLOATS
- default_value: null
  description: 'A list of 2 (or 4 if bidirectional) activation functions for update,
    reset, and hidden gates. The activation functions must be one of the activation
    functions specified above. Optional: See the equations for default if not specified.'
  name: activations
  required: false
  type: AttrType.STRINGS
- default_value: null
  description: Cell clip threshold. Clipping bounds the elements of a tensor in the
    range of [-threshold, +threshold] and is applied to the input of activations.
    No clip if not specified.
  name: clip
  required: false
  type: AttrType.FLOAT
- default_value: forward
  description: Specify if the RNN is forward, reverse, or bidirectional. Must be one
    of forward (default), reverse, or bidirectional.
  name: direction
  required: false
  type: AttrType.STRING
- default_value: null
  description: Number of neurons in the hidden layer
  name: hidden_size
  required: false
  type: AttrType.INT
- default_value: 0
  description: 'The shape format of inputs X, initial_h and outputs Y, Y_h. If 0,
    the following shapes are expected: X.shape = [seq_length, batch_size, input_size],
    Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape
    = Y_h.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes
    are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size,
    seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = [batch_size,
    num_directions, hidden_size].'
  name: layout
  required: false
  type: AttrType.INT
- default_value: 0
  description: When computing the output of the hidden gate, apply the linear transformation
    before multiplying by the output of the reset gate.
  name: linear_before_reset
  required: false
  type: AttrType.INT
deprecated: false
doc: "\nComputes an one-layer GRU. This operator is usually supported via some custom\n\
  implementation such as CuDNN.\n\nNotations:\n\n* `X` - input tensor\n* `z` - update\
  \ gate\n* `r` - reset gate\n* `h` - hidden gate\n* `t` - time step (t-1 means previous\
  \ time step)\n* `W[zrh]` - W parameter weight matrix for update, reset, and hidden\
  \ gates\n* `R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates\n\
  * `Wb[zrh]` - W bias vectors for update, reset, and hidden gates\n* `Rb[zrh]` -\
  \ R bias vectors for update, reset, and hidden gates\n* `WB[zrh]` - W parameter\
  \ weight matrix for backward update, reset, and hidden gates\n* `RB[zrh]` - R recurrence\
  \ weight matrix for backward update, reset, and hidden gates\n* `WBb[zrh]` - W bias\
  \ vectors for backward update, reset, and hidden gates\n* `RBb[zrh]` - R bias vectors\
  \ for backward update, reset, and hidden gates\n* `H` - Hidden state\n* `num_directions`\
  \ - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n* Relu(x)\
  \                - max(0, x)\n* Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\
  * Sigmoid(x)             - 1/(1 + e^{-x})\n\nNOTE:\n  Below are optional\n\n* Affine(x)\
  \              - alpha * x + beta\n* LeakyRelu(x)           - x if x >= 0 else alpha\
  \ * x\n* ThresholdedRelu(x)     - x if x >= alpha else 0\n* ScaledTanh(x)      \
  \    - alpha * Tanh(beta * x)\n* HardSigmoid(x)         - min(max(alpha * x + beta,\
  \ 0), 1)\n* Elu(x)                 - x if x >= 0 else alpha * (e^x - 1)\n* Softsign(x)\
  \            - x/(1 + |x|)\n* Softplus(x)            - log(1 + e^x)\n\nEquations\
  \ (Default: f=Sigmoid, g=Tanh):\n\n* zt = f(Xt*(Wz^T) + Ht-1*(Rz^T) + Wbz + Rbz)\n\
  * rt = f(Xt*(Wr^T) + Ht-1*(Rr^T) + Wbr + Rbr)\n* ht = g(Xt*(Wh^T) + (rt (.) Ht-1)*(Rh^T)\
  \ + Rbh + Wbh) # default, when linear_before_reset = 0\n* ht = g(Xt*(Wh^T) + (rt\
  \ (.) (Ht-1*(Rh^T) + Rbh)) + Wbh) # when linear_before_reset != 0\n* Ht = (1 - zt)\
  \ (.) ht + zt (.) Ht-1\nThis operator has **optional** inputs/outputs. See [the\
  \ doc](IR.md) for more details about the representation of optional arguments. An\
  \ empty string may be used in the place of an actual argument's name to indicate\
  \ a missing argument. Trailing optional arguments (those not followed by an argument\
  \ that is present) may also be simply omitted.\n"
domain: ''
inputs:
- description: The input sequences packed (and potentially padded) into one 3-D tensor
    with the shape of `[seq_length, batch_size, input_size]`.
  min_arity: 1
  name: X
  tags:
  - differentiable
  type_str: T
- description: The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]`
    (if bidirectional) along dimension 0. This tensor has shape `[num_directions,
    3*hidden_size, input_size]`.
  min_arity: 1
  name: W
  tags:
  - differentiable
  type_str: T
- description: The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]`
    (if bidirectional) along dimension 0. This tensor has shape `[num_directions,
    3*hidden_size, hidden_size]`.
  min_arity: 1
  name: R
  tags:
  - differentiable
  type_str: T
- description: 'The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]`
    and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has
    shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed
    to be 0'
  min_arity: 1
  name: B
  tags:
  - optional
  - differentiable
  type_str: T
- description: Optional tensor specifying lengths of the sequences in a batch. If
    not specified - assumed all sequences in the batch to have length `seq_length`.
    It has shape `[batch_size]`.
  min_arity: 1
  name: sequence_lens
  tags:
  - optional
  - non-differentiable
  type_str: T1
- description: Optional initial value of the hidden. If not specified - assumed to
    be 0. It has shape `[num_directions, batch_size, hidden_size]`.
  min_arity: 1
  name: initial_h
  tags:
  - optional
  - non-differentiable
  type_str: T
max_input: 6
max_output: 2
min_input: 3
min_output: 0
name: GRU
outputs:
- description: 'A tensor that concats all the intermediate output values of the hidden.
    It has shape `[seq_length, num_directions, batch_size, hidden_size]`. '
  min_arity: 1
  name: Y
  tags:
  - optional
  - differentiable
  type_str: T
- description: The last output value of the hidden. It has shape `[num_directions,
    batch_size, hidden_size]`.
  min_arity: 1
  name: Y_h
  tags:
  - optional
  - differentiable
  type_str: T
since_version: 14
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to float tensors.
  type_param_str: T
- allowed_type_strs:
  - tensor(int32)
  description: Constrain seq_lens to integer tensor.
  type_param_str: T1
