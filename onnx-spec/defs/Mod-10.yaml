attributes:
- default_value: 0
  description: Whether the operator should behave like fmod (default=0 meaning it
    will do integer mods); Set this to 1 to force fmod treatment
  name: fmod
  required: false
  type: AttrType.INT
deprecated: false
doc: "\n  Performs element-wise binary modulus (with Numpy-style broadcasting support).\n\
  \    The sign of the remainder is the same as that of the Divisor.\n\n    Mod operator\
  \ can also behave like C fmod() or numpy.fmod. In this case, the sign of the remainder\
  \ however, will be the same as the Dividend\n    (in contrast to integer mod). To\
  \ force a behavior like numpy.fmod() an 'fmod' Attribute is provided.\n    This\
  \ attribute is set to 0 by default causing the behavior to be like integer mod.\n\
  \    Setting this attribute to 1 causes the remainder to be calculated similar to\
  \ that of numpy.fmod().\n\n    If the input type is floating point, then `fmod`\
  \ attribute must be set to 1.\n\n    In case of dividend being zero, the results\
  \ will be platform dependent.\n\n  This operator supports **multidirectional (i.e.,\
  \ Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n"
domain: ''
inputs:
- description: Dividend tensor
  min_arity: 1
  name: A
  tags: []
  type_str: T
- description: Divisor tensor
  min_arity: 1
  name: B
  tags: []
  type_str: T
max_input: 2
max_output: 1
min_input: 2
min_output: 1
name: Mod
outputs:
- description: Remainder tensor
  min_arity: 1
  name: C
  tags: []
  type_str: T
since_version: 10
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to high-precision numeric tensors.
  type_param_str: T
