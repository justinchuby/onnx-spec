domain: ''
name: GroupNormalization
since_version: 18
min_input: 3
max_input: 3
min_output: 1
max_output: 1
doc: |-
  A GroupNormalization function. Carries out group normalization as described in
  the paper https://arxiv.org/abs/1803.08494

  This operator transforms input according to
  ```
  y = scale * (x - mean) / sqrt(variance + epsilon) + bias,
  ```
  where the mean and variance are computed per instance per group of channels, and
  `scale` and `bias` should be specified for each group of channels. The number of
  groups `num_groups` should be divisible by the number of channels so that there are
  an equal number of channels per group.

  When the number of groups is the same as the number of channels, this operator is
  equivalent to InstanceNormalization. When there is only one group, this operator
  is equivalent to LayerNormalization.
attributes:
  - name: epsilon
    description: >-
      The epsilon value to use to avoid division by zero.
    type: FLOAT
    required: false
    default_value: 9.999999747378752e-06
  - name: num_groups
    description: >-
      The number of groups of channels. It should be a divisor of the number of channels
      `C`.
    type: INT
    required: true
inputs:
  - name: X
    type_str: T
    description: Input data tensor. Dimensions for image cases are `(N x C x H x
      W)`, where `N` is the batch size, `C` is the number of channels, and `H` 
      and `W` are the height and width of the data. Statistics are computed for 
      every group of channels over `C`, `H`, and `W`. For non-image cases, the 
      dimensions are in the form of `(N x C x D1 x D2 ... Dn)`.
    min_arity: 1
    tags:
      - differentiable
  - name: scale
    type_str: T
    description: Scale tensor of shape `(num_groups)`.
    min_arity: 1
    tags:
      - differentiable
  - name: bias
    type_str: T
    description: Bias tensor of shape `(num_groups)`.
    min_arity: 1
    tags:
      - differentiable
outputs:
  - name: Y
    type_str: T
    description: The output tensor of the same shape as `X`.
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to float tensors.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(bfloat16)
support_level: COMMON
deprecated: true
