domain: ''
name: If
since_version: 19
min_input: 1
max_input: 1
min_output: 1
max_output: 2147483647
doc: |-
  If conditional
attributes:
  - name: else_branch
    description: >-
      Graph to run if condition is false. Has N outputs: values you wish to be live-out
      to the enclosing scope. The number of outputs must match the number of outputs
      in the then_branch.
    type: GRAPH
    required: true
  - name: then_branch
    description: >-
      Graph to run if condition is true. Has N outputs: values you wish to be live-out
      to the enclosing scope. The number of outputs must match the number of outputs
      in the else_branch.
    type: GRAPH
    required: true
inputs:
  - name: cond
    type_str: B
    description: Condition for the if. The tensor must contain a single element.
    min_arity: 1
    tags: []
outputs:
  - name: outputs
    type_str: V
    description: Values that are live-out to the enclosing scope. The return 
      values in the `then_branch` and `else_branch` must be of the same data 
      type. The `then_branch` and `else_branch` may produce tensors with the 
      same element type and different shapes. If corresponding outputs from the 
      then-branch and the else-branch have static shapes S1 and S2, then the 
      shape of the corresponding output variable of the if-node (if present) 
      must be compatible with both S1 and S2 as it represents the union of both 
      possible shapes.For example, if in a model file, the first output of 
      `then_branch` is typed float tensor with shape [2] and the first output of
      `else_branch` is another float tensor with shape [3], If's first output 
      should have (a) no shape set, or (b) a shape of rank 1 with neither 
      `dim_value` nor `dim_param` set, or (c) a shape of rank 1 with a unique 
      `dim_param`. In contrast, the first output cannot have the shape [2] since
      [2] and [3] are not compatible.
    min_arity: 1
    tags:
      - variadic
      - heterogeneous
type_constraints:
  - type_param_str: V
    description: All Tensor, Sequence(Tensor), Optional(Tensor), and 
      Optional(Sequence(Tensor)) types up to IRv9.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(bfloat16)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
      - tensor(float8e4m3fn)
      - tensor(float8e4m3fnuz)
      - tensor(float8e5m2)
      - tensor(float8e5m2fnuz)
      - seq(tensor(uint8))
      - seq(tensor(uint16))
      - seq(tensor(uint32))
      - seq(tensor(uint64))
      - seq(tensor(int8))
      - seq(tensor(int16))
      - seq(tensor(int32))
      - seq(tensor(int64))
      - seq(tensor(bfloat16))
      - seq(tensor(float16))
      - seq(tensor(float))
      - seq(tensor(double))
      - seq(tensor(string))
      - seq(tensor(bool))
      - seq(tensor(complex64))
      - seq(tensor(complex128))
      - seq(tensor(float8e4m3fn))
      - seq(tensor(float8e4m3fnuz))
      - seq(tensor(float8e5m2))
      - seq(tensor(float8e5m2fnuz))
      - optional(seq(tensor(uint8)))
      - optional(seq(tensor(uint16)))
      - optional(seq(tensor(uint32)))
      - optional(seq(tensor(uint64)))
      - optional(seq(tensor(int8)))
      - optional(seq(tensor(int16)))
      - optional(seq(tensor(int32)))
      - optional(seq(tensor(int64)))
      - optional(seq(tensor(bfloat16)))
      - optional(seq(tensor(float16)))
      - optional(seq(tensor(float)))
      - optional(seq(tensor(double)))
      - optional(seq(tensor(string)))
      - optional(seq(tensor(bool)))
      - optional(seq(tensor(complex64)))
      - optional(seq(tensor(complex128)))
      - optional(tensor(uint8))
      - optional(tensor(uint16))
      - optional(tensor(uint32))
      - optional(tensor(uint64))
      - optional(tensor(int8))
      - optional(tensor(int16))
      - optional(tensor(int32))
      - optional(tensor(int64))
      - optional(tensor(bfloat16))
      - optional(tensor(float16))
      - optional(tensor(float))
      - optional(tensor(double))
      - optional(tensor(string))
      - optional(tensor(bool))
      - optional(tensor(complex64))
      - optional(tensor(complex128))
      - optional(tensor(float8e4m3fn))
      - optional(tensor(float8e4m3fnuz))
      - optional(tensor(float8e5m2))
      - optional(tensor(float8e5m2fnuz))
  - type_param_str: B
    description: Only bool
    allowed_type_strs:
      - tensor(bool)
support_level: COMMON
deprecated: false
