domain: ''
name: OneHot
since_version: 9
min_input: 3
max_input: 3
min_output: 1
max_output: 1
doc: |-
  Produces a one-hot tensor based on inputs.
  The locations represented by the index values in the 'indices' input tensor will have 'on_value'
  and the other locations will have 'off_value' in the output tensor, where 'on_value' and 'off_value'
  are specified as part of required input argument 'values', which is a two-element tensor of format
  [off_value, on_value]. The rank of the output tensor will be one greater than the rank of the
  input tensor. The additional dimension is for one-hot representation. The additional dimension will
  be inserted at the position specified by 'axis'. If 'axis' is not specified then then additional
  dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional
  dimension is specified by required scalar input 'depth'. The type of the output tensor is the same
  as the type of the 'values' input. Any entries in the 'indices' input tensor with values outside
  the range [0, depth) will result in one-hot representation with all 'off_value' values in the
  output tensor.
attributes:
  - name: axis
    description: >-
      (Optional) Axis along which one-hot representation in added. Default: axis=-1.
      axis=-1 means that the additional dimension will be inserted as the innermost/last
      dimension in the output tensor.
    type: INT
    required: false
    default_value: -1
inputs:
  - name: indices
    type_str: T1
    description: Input tensor containing indices. The values must be non-negative
      integers. Any entries in the 'indices' input tensor with values outside the
      range [0, depth) will result in one-hot representation with all 'off_value'
      values in the output tensor.In case 'indices' is of non-integer type, the values
      will be casted to int64 before use.
    min_arity: 1
    tags: []
  - name: depth
    type_str: T2
    description: Scalar or rank 1 tensor containing exactly one element, specifying
      the number of classes in one-hot tensor. This is also the size of the one-hot
      dimension (specified by 'axis' attribute) added on in the output tensor. The
      values in the 'indices' input tensor are expected to be in the range [0, depth).
      In case 'depth' is of non-integer type, it will be casted to int64 before use.
    min_arity: 1
    tags: []
  - name: values
    type_str: T3
    description: "Rank 1 tensor containing exactly two elements, in the format [off_value,
      on_value], where 'on_value' is the value used for filling locations specified
      in 'indices' input tensor, and 'off_value' is the value used for filling locations
      other than those specified in 'indices' input tensor. "
    min_arity: 1
    tags: []
outputs:
  - name: output
    type_str: T3
    description: Tensor of rank one greater than input tensor 'indices', i.e. rank(output)
      = rank(indices) + 1. The data type for the elements of the output tensor is
      the same as the type of input 'values' is used.
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T1
    description: Constrain input to only numeric types.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
  - type_param_str: T2
    description: Constrain input to only numeric types.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
  - type_param_str: T3
    description: Constrain to any tensor type.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
support_level: COMMON
deprecated: false
