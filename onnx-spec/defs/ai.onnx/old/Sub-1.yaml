domain: ''
name: Sub
since_version: 1
min_input: 2
max_input: 2
min_output: 1
max_output: 1
doc: |-
  Performs element-wise binary subtraction (with limited broadcast support).

  If necessary the right-hand-side argument will be broadcasted to match the
  shape of left-hand-side argument. When broadcasting is specified, the second
  tensor can either be of element size 1 (including a scalar tensor and any
  tensor with rank equal to or smaller than the first tensor), or having its
  shape as a contiguous subset of the first tensor's shape. The starting of the
  mutually equal shape is specified by the argument "axis", and if it is not set,
  suffix matching is assumed. 1-dim expansion doesn't work yet.

  For example, the following tensor shapes are supported (with broadcast=1):

    shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor
    shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor
    shape(A) = (2, 3, 4, 5), shape(B) = (5,)
    shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)
    shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1
    shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0

  Attribute `broadcast=1` needs to be passed to enable broadcasting.
attributes:
  - name: axis
    description: >-
      If set, defines the broadcast dimensions. See doc for details.
    type: INT
    required: false
  - name: broadcast
    description: >-
      Pass 1 to enable broadcasting
    type: INT
    required: false
    default_value: 0
  - name: consumed_inputs
    description: >-
      legacy optimization attribute.
    type: INTS
    required: false
inputs:
  - name: A
    type_str: T
    description: First operand, should share the type with the second operand.
    min_arity: 1
    tags: []
  - name: B
    type_str: T
    description: Second operand. With broadcasting can be of smaller size than 
      A. If broadcasting is disabled it should be of the same size.
    min_arity: 1
    tags: []
outputs:
  - name: C
    type_str: T
    description: Result, has same dimensions and type as A
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to float tensors.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
support_level: COMMON
deprecated: false
