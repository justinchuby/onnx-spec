domain: ''
name: Mod
since_version: 10
min_input: 2
max_input: 2
min_output: 1
max_output: 1
doc: |-
  Performs element-wise binary modulus (with Numpy-style broadcasting support).
    The sign of the remainder is the same as that of the Divisor.

    Mod operator can also behave like C fmod() or numpy.fmod. In this case, the sign of the remainder however, will be the same as the Dividend
    (in contrast to integer mod). To force a behavior like numpy.fmod() an 'fmod' Attribute is provided.
    This attribute is set to 0 by default causing the behavior to be like integer mod.
    Setting this attribute to 1 causes the remainder to be calculated similar to that of numpy.fmod().

    If the input type is floating point, then `fmod` attribute must be set to 1.

    In case of dividend being zero, the results will be platform dependent.

  This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
attributes:
  - name: fmod
    description: >-
      Whether the operator should behave like fmod (default=0 meaning it will do integer
      mods); Set this to 1 to force fmod treatment
    type: INT
    required: false
    default_value: 0
inputs:
  - name: A
    type_str: T
    description: Dividend tensor
    min_arity: 1
    tags: []
  - name: B
    type_str: T
    description: Divisor tensor
    min_arity: 1
    tags: []
outputs:
  - name: C
    type_str: T
    description: Remainder tensor
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to high-precision numeric tensors.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
support_level: COMMON
deprecated: false
