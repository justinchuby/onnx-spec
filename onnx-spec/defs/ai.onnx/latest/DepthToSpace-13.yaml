domain: ''
name: DepthToSpace
since_version: 13
min_input: 1
max_input: 1
min_output: 1
max_output: 1
doc: |-
  DepthToSpace rearranges (permutes) data from depth into blocks of spatial data.
  This is the reverse transformation of SpaceToDepth. More specifically, this op outputs a copy of
  the input tensor where values from the depth dimension are moved in spatial blocks to the height
  and width dimensions. By default, `mode` = `DCR`.
  In the DCR mode, elements along the depth dimension from the input tensor are rearranged in the
  following order: depth, column, and then row. The output y is computed from the input x as below:

  ```
  b, c, h, w = x.shape
  tmp = np.reshape(x, [b, blocksize, blocksize, c // (blocksize**2), h, w])
  tmp = np.transpose(tmp, [0, 3, 4, 1, 5, 2])
  y = np.reshape(tmp, [b, c // (blocksize**2), h * blocksize, w * blocksize])
  ```

  In the CRD mode, elements along the depth dimension from the input tensor are rearranged in the
  following order: column, row, and the depth. The output y is computed from the input x as below:

  ```
  b, c, h, w = x.shape
  tmp = np.reshape(x, [b, c // (blocksize ** 2), blocksize, blocksize, h, w])
  tmp = np.transpose(tmp, [0, 1, 4, 2, 5, 3])
  y = np.reshape(tmp, [b, c // (blocksize ** 2), h * blocksize, w * blocksize])
  ```
attributes:
  - name: blocksize
    description: >-
      Blocks of [blocksize, blocksize] are moved.
    type: INT
    required: true
  - name: mode
    description: >-
      DCR (default) for depth-column-row order re-arrangement. Use CRD for column-row-depth
      order.
    type: STRING
    required: false
    default_value: DCR
inputs:
  - name: input
    type_str: T
    description: Input tensor of [N,C,H,W], where N is the batch axis, C is the channel
      or depth, H is the height and W is the width.
    min_arity: 1
    tags:
      - differentiable
outputs:
  - name: output
    type_str: T
    description: Output tensor of [N, C/(blocksize * blocksize), H * blocksize, W
      * blocksize].
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to all tensor types.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(bfloat16)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
support_level: COMMON
deprecated: false
