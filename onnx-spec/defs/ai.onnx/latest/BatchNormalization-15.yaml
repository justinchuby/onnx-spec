domain: ''
name: BatchNormalization
since_version: 15
min_input: 5
max_input: 5
min_output: 1
max_output: 3
doc: |-
  Carries out batch normalization as described in the paper
  https://arxiv.org/abs/1502.03167. Depending on the mode it is being run,
  There are five required inputs 'X', 'scale', 'B', 'input_mean' and
  'input_var'.
  Note that 'input_mean' and 'input_var' are expected to be the estimated
  statistics in inference mode (training_mode=False, default),
  and the running statistics in training mode (training_mode=True).
  There are multiple cases for the number of outputs, which we list below:

  * Output case #1: Y, running_mean, running_var (training_mode=True)
  * Output case #2: Y (training_mode=False)

  When training_mode=False, extra outputs are invalid.
  The outputs are updated as follows when training_mode=True:
  ```
  running_mean = input_mean * momentum + current_mean * (1 - momentum)
  running_var = input_var * momentum + current_var * (1 - momentum)

  Y = (X - current_mean) / sqrt(current_var + epsilon) * scale + B
  ```
  where:
  ```
  current_mean = ReduceMean(X, axis=all_except_channel_index)
  current_var =  ReduceVar(X, axis=all_except_channel_index)
  ```
  Notice that `ReduceVar` refers to the population variance, and it equals to
  `sum(sqrd(x_i - x_avg)) / N`
  where `N` is the population size (this formula does not use sample size `N - 1`).

  The computation of ReduceMean and ReduceVar uses float to avoid overflow for float16 inputs.

  When training_mode=False:
  ```
  Y = (X - input_mean) / sqrt(input_var + epsilon) * scale + B
  ```

  For previous (depreciated) non-spatial cases, implementors are suggested
  to flatten the input shape to (N x C * D1 * D2 * ... * Dn) before a BatchNormalization Op.
  This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.
attributes:
  - name: epsilon
    description: >-
      The epsilon value to use to avoid division by zero.
    type: FLOAT
    required: false
    default_value: 9.999999747378752e-06
  - name: momentum
    description: >-
      Factor used in computing the running mean and variance.e.g., running_mean =
      running_mean * momentum + mean * (1 - momentum).
    type: FLOAT
    required: false
    default_value: 0.8999999761581421
  - name: training_mode
    description: >-
      If set to true, it indicates BatchNormalization is being used for training,
      and outputs 1, 2, 3, and 4 would be populated.
    type: INT
    required: false
    default_value: 0
inputs:
  - name: X
    type_str: T
    description: Input data tensor from the previous operator; dimensions are in the
      form of (N x C x D1 x D2 ... Dn), where N is the batch size, C is the number
      of channels. Statistics are computed for every channel of C over N and D1 to
      Dn dimensions. For image data, input dimensions become (N x C x H x W). The
      op also accepts single dimension input of size N in which case C is assumed
      to be 1
    min_arity: 1
    tags:
      - differentiable
  - name: scale
    type_str: T1
    description: Scale tensor of shape (C).
    min_arity: 1
    tags:
      - differentiable
  - name: B
    type_str: T1
    description: Bias tensor of shape (C).
    min_arity: 1
    tags:
      - differentiable
  - name: input_mean
    type_str: T2
    description: running (training) or estimated (testing) mean tensor of shape (C).
    min_arity: 1
    tags:
      - differentiable
  - name: input_var
    type_str: T2
    description: running (training) or estimated (testing) variance tensor of shape
      (C).
    min_arity: 1
    tags:
      - differentiable
outputs:
  - name: Y
    type_str: T
    description: The output tensor of the same shape as X
    min_arity: 1
    tags:
      - differentiable
  - name: running_mean
    type_str: T2
    description: The running mean after the BatchNormalization operator.
    min_arity: 1
    tags:
      - optional
      - non-differentiable
  - name: running_var
    type_str: T2
    description: The running variance after the BatchNormalization operator. This
      op uses the population size (N) for calculating variance, and not the sample
      size N-1.
    min_arity: 1
    tags:
      - optional
      - non-differentiable
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to float tensors.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(bfloat16)
  - type_param_str: T1
    description: Constrain scale and bias types to float tensors.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(bfloat16)
  - type_param_str: T2
    description: Constrain mean and variance types to float tensors.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(bfloat16)
support_level: COMMON
deprecated: false
