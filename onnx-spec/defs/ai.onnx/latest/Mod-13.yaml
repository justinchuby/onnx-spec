domain: ''
name: Mod
since_version: 13
min_input: 2
max_input: 2
min_output: 1
max_output: 1
doc: |-
  Performs an element-wise binary modulo operation.
  The semantics and supported data types depend on the value of the `fmod` attribute which must be `0` (default), or `1`.

  If the `fmod` attribute is set to `0`, `T` is constrained to integer data types and the semantics follow that of the Python `%`-operator.
  The sign of the result is that of the divisor.

  If `fmod` is set to `1`, the behavior of this operator follows that of the `fmod` function in C and `T` is constrained to floating point data types.
  The result of this operator is the remainder of the division operation `x / y` where `x` and `y` are respective elements of `A` and `B`. The result is exactly the value `x - n * y`, where `n` is `x / y` with its fractional part truncated.
  The returned value has the same sign as `x` (except if `x` is `-0`) and is less or equal to `|y|` in magnitude.
  The following special cases apply when `fmod` is set to `1`:
  - If `x` is `-0` and `y` is greater than zero, either `+0` or `-0` may be returned.
  - If `x` is `±∞` and `y` is not `NaN`, `NaN` is returned.
  - If `y` is `±0` and `x` is not `NaN`, `NaN` should be returned.
  - If `y` is `±∞` and `x` is finite, `x` is returned.
  - If either argument is `NaN`, `NaN` is returned.

  This operator supports **multidirectional (i.e., NumPy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
attributes:
  - name: fmod
    description: >-
      Whether the operator should behave like fmod (default=0 meaning it will do integer
      mods); Set this to 1 to force fmod treatment
    type: INT
    required: false
    default_value: 0
inputs:
  - name: A
    type_str: T
    description: Dividend tensor
    min_arity: 1
    tags:
      - differentiable
  - name: B
    type_str: T
    description: Divisor tensor
    min_arity: 1
    tags:
      - non-differentiable
outputs:
  - name: C
    type_str: T
    description: Remainder tensor
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to high-precision numeric 
      tensors.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(bfloat16)
support_level: COMMON
deprecated: false
