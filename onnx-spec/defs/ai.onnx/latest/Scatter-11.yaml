domain: ''
name: Scatter
since_version: 11
min_input: 3
max_input: 3
min_output: 1
max_output: 1
doc: |-
  This operator is deprecated. Please use ScatterElements, which provides the same functionality.

  Scatter takes three inputs `data`, `updates`, and `indices` of the same
  rank r >= 1 and an optional attribute axis that identifies an axis of `data`
  (by default, the outer-most axis, that is axis 0). The output of the operation
  is produced by creating a copy of the input `data`, and then updating its value
  to values specified by `updates` at specific index positions specified by
  `indices`. Its output shape is the same as the shape of `data`.

  For each entry in `updates`, the target index in `data` is obtained by combining
  the corresponding entry in `indices` with the index of the entry itself: the
  index-value for dimension = axis is obtained from the value of the corresponding
  entry in `indices` and the index-value for dimension != axis is obtained from the
  index of the entry itself.

  For instance, in a 2-D tensor case, the update corresponding to the [i][j] entry
  is performed as below:
  ```
    output[indices[i][j]][j] = updates[i][j] if axis = 0,
    output[i][indices[i][j]] = updates[i][j] if axis = 1,
  ```

  This operator is the inverse of GatherElements. It is similar to Torch's Scatter operation.

  Example 1:
  ```
    data = [
        [0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0],
    ]
    indices = [
        [1, 0, 2],
        [0, 2, 1],
    ]
    updates = [
        [1.0, 1.1, 1.2],
        [2.0, 2.1, 2.2],
    ]
    output = [
        [2.0, 1.1, 0.0]
        [1.0, 0.0, 2.2]
        [0.0, 2.1, 1.2]
    ]
  ```
  Example 2:
  ```
    data = [[1.0, 2.0, 3.0, 4.0, 5.0]]
    indices = [[1, 3]]
    updates = [[1.1, 2.1]]
    axis = 1
    output = [[1.0, 1.1, 3.0, 2.1, 5.0]]
  ```
attributes:
  - name: axis
    description: >-
      Which axis to scatter on. Negative value means counting dimensions from the
      back. Accepted range is [-r, r-1] where r = rank(data).
    type: INT
    required: false
    default_value: 0
inputs:
  - name: data
    type_str: T
    description: Tensor of rank r >= 1.
    min_arity: 1
    tags:
      - differentiable
  - name: indices
    type_str: Tind
    description: Tensor of int32/int64 indices, of r >= 1 (same rank as input). All
      index values are expected to be within bounds [-s, s-1] along axis of size s.
      It is an error if any of the index values are out of bounds.
    min_arity: 1
    tags:
      - non-differentiable
  - name: updates
    type_str: T
    description: Tensor of rank r >=1 (same rank and shape as indices)
    min_arity: 1
    tags:
      - differentiable
outputs:
  - name: output
    type_str: T
    description: Tensor of rank r >= 1 (same rank as input).
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T
    description: Input and output types can be of any tensor type.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
  - type_param_str: Tind
    description: Constrain indices to integer types
    allowed_type_strs:
      - tensor(int32)
      - tensor(int64)
support_level: COMMON
deprecated: true
