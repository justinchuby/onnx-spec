domain: ''
name: CenterCropPad
since_version: 18
min_input: 2
max_input: 2
min_output: 1
max_output: 1
doc: |-
  Center crop or pad an input to given dimensions.

  The crop/pad dimensions can be specified for a subset of the `axes`; unspecified dimensions will remain unchanged.

  If the input dimensions are larger than the target crop dimensions, a centered cropping window will be extracted
  from the input. The starting value for the cropping window is rounded down, which means that if the difference
  between the input shape and the crop shape is odd, the cropping window will be shifted half a pixel to the left
  of the input center.

  If the input dimensions are smaller than the target crop dimensions, the input will be padded equally on both sides
  to center it in the output. In cases where the total number of padding pixels is odd, an additional pixel will be
  added to the right side.

  The padding value used is zero.
attributes:
  - name: axes
    description: >-
      If provided, it specifies a subset of axes that 'shape' refer to. If not provided,
      all axes are assumed [0, 1, ..., r-1], where r = rank(data). Negative value
      means counting dimensions from the back. Accepted range is [-r, r-1], where
      r = rank(data). Behavior is undefined if an axis is repeated.
    type: INTS
    required: false
inputs:
  - name: input_data
    type_str: T
    description: Input to extract the centered crop from.
    min_arity: 1
    tags:
      - differentiable
  - name: shape
    type_str: Tind
    description: 1-D tensor representing the cropping window dimensions.
    min_arity: 1
    tags:
      - non-differentiable
outputs:
  - name: output_data
    type_str: T
    description: Output data.
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T
    description: Constrain input and output types to all tensor types.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(bfloat16)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
  - type_param_str: Tind
    description: Constrain indices to integer types
    allowed_type_strs:
      - tensor(int32)
      - tensor(int64)
support_level: COMMON
deprecated: false
