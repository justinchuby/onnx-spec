domain: ''
name: Resize
since_version: 19
min_input: 1
max_input: 4
min_output: 1
max_output: 1
doc: |-
  Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.
  Each dimension value of the output tensor is:
  ```
  output_dimension = floor(input_dimension * (roi_end - roi_start) * scale)
  ```
  if input \"sizes\" is not specified.
attributes:
  - name: antialias
    description: If set to 1, "linear" and "cubic" interpolation modes will use an
      antialiasing filter when downscaling. Antialiasing is achieved by stretching
      the resampling filter by a factor max(1, 1 / scale), which means that when downsampling,
      more input pixels contribute to an output pixel.
    type: INT
    required: false
    default_value: 0
  - name: axes
    description: If provided, it specifies a subset of axes that 'roi', 'scales' and
      'sizes' refer to. If not provided, all axes are assumed [0, 1, ..., r-1], where
      r = rank(data). Non-specified dimensions are interpreted as non-resizable. Negative
      value means counting dimensions from the back. Accepted range is [-r, r-1],
      where r = rank(data). Behavior is undefined if an axis is repeated.
    type: INTS
    required: false
    default_value:
  - name: coordinate_transformation_mode
    description: "\nThis attribute describes how to transform the coordinate in the
      resized tensor to the coordinate in the original tensor.\n\nThe coordinate of
      each dimension is transformed individually. Let's describe a case using axis
      x as an example.\nDenote `x_resized` as the coordinate of axis x in the resized
      tensor,\n `x_original` as the coordinate of axis x in the original tensor,\n
      `length_original` as the length of the original tensor in axis x,\n `length_resized`
      as the length of the resized tensor in axis x,\n `scale = length_resized / length_original`,\n
      `output_width` the target length on the axis x which can be a fractional number
      when it is calculated out of a scale factor,\n and `output_width_int` the effective
      output width as an integer.\n\nif coordinate_transformation_mode is `\"half_pixel\"\
      `,\n```\nx_original = (x_resized + 0.5) / scale - 0.5\n```\n\nif coordinate_transformation_mode
      is `\"half_pixel_symmetric\"`,\n```\nadjustment = output_width_int / output_width\n
      center = input_width / 2\noffset = center * (1 - adjustment)\nx_ori = offset
      + (x + 0.5) / scale - 0.5\n```\n\nif coordinate_transformation_mode is `\"pytorch_half_pixel\"\
      `,\n```\nx_original = length_resized > 1 ? (x_resized + 0.5) / scale - 0.5 :
      0\n```\n\nif coordinate_transformation_mode is `\"align_corners\"`,\n```\nx_original
      = x_resized * (length_original - 1) / (length_resized - 1)\n```\n\nif coordinate_transformation_mode
      is `\"asymmetric\"`,\n```\nx_original = x_resized / scale\n```\n\nif coordinate_transformation_mode
      is `\"tf_crop_and_resize\"`,\n```\nx_original = length_resized > 1 ? start_x
      * (length_original - 1) + x_resized * (end_x - start_x) * (length_original -
      1) / (length_resized - 1) : 0.5 * (start_x + end_x) * (length_original - 1)\n\
      ```\n."
    type: STRING
    required: false
    default_value: half_pixel
  - name: cubic_coeff_a
    description: The coefficient 'a' used in cubic interpolation. Two common choice
      are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check out Equation
      (4) in https://ieeexplore.ieee.org/document/1163711 for the details. This attribute
      is valid only if mode is "cubic".
    type: FLOAT
    required: false
    default_value: -0.75
  - name: exclude_outside
    description: If set to 1, the weight of sampling locations outside the tensor
      will be set to 0 and the weight will be renormalized so that their sum is 1.0.
      The default value is 0.
    type: INT
    required: false
    default_value: 0
  - name: extrapolation_value
    description: When coordinate_transformation_mode is "tf_crop_and_resize" and x_original
      is outside the range [0, length_original - 1], this value is used as the corresponding
      output value. Default is 0.0f.
    type: FLOAT
    required: false
    default_value: 0.0
  - name: keep_aspect_ratio_policy
    description: "\nThis attribute describes how to interpret the `sizes` input with
      regard to keeping the original aspect ratio of the input, and it is not applicable
      when\nthe `scales` input is used.\n\nGiven a set of `sizes`, associated with
      a subset of `axes` (explicitly provided or default), and assuming `d = axes[i]`,
      with `i` being the index of the provided `sizes`.\n\nIf `keep_aspect_ratio_policy`
      is `\"stretch\"`, the original aspect ratio is disregarded, and the input is
      resized to the specified size:\n`out_size[d] = sizes[i]`\n\nIf `keep_aspect_ratio_policy`
      is `\"not_larger\"`, the sizes are adjusted so that no extent of the output
      is larger than the specified size, while keeping the original aspect ratio:\n
      ```\nscale = Min(sizes[i] / in_size[d])\nout_size[d] = round_int(scale * in_size[i])\n
      ```\n\nIf `keep_aspect_ratio_policy` is `\"not_smaller\"`, the sizes are adjusted
      so that no extent of the output is smaller than the specified size, while keeping
      the original aspect ratio:\n```\nscale = Max(sizes[i] / in_size[d])\nout_size[d]
      = round_int(scale * in_size[i])\n```\n\nFor non-resizable axes (those not specified
      in `axes`), the output size will be equal to the input size.\n\nNote: `round_int`
      stands for computing the nearest integer value, rounding halfway cases up."
    type: STRING
    required: false
    default_value: stretch
  - name: mode
    description: 'Three interpolation modes: "nearest" (default), "linear" and "cubic".
      The "linear" mode includes linear interpolation for 1D tensor and N-linear interpolation
      for N-D tensor (for example, bilinear interpolation for 2D tensor). The "cubic"
      mode includes cubic interpolation for 1D tensor and N-cubic interpolation for
      N-D tensor (for example, bicubic interpolation for 2D tensor).'
    type: STRING
    required: false
    default_value: nearest
  - name: nearest_mode
    description: 'Four modes: "round_prefer_floor" (default, as known as round half
      down), "round_prefer_ceil" (as known as round half up), "floor", "ceil". Only
      used by nearest interpolation. It indicates how to get "nearest" pixel in input
      tensor from x_original, so this attribute is valid only if "mode" is "nearest".'
    type: STRING
    required: false
    default_value: round_prefer_floor
inputs:
  - name: X
    type_str: T1
    description: N-D tensor
    min_arity: 1
    tags:
      - differentiable
  - name: roi
    type_str: T2
    description: 1-D tensor given as [start1, ..., startN, end1, ..., endN], where
      N is the rank of X or the length of axes, if provided. The RoIs' coordinates
      are normalized in the coordinate system of the input image. It only takes effect
      when coordinate_transformation_mode is "tf_crop_and_resize"
    min_arity: 1
    tags:
      - optional
      - non-differentiable
  - name: scales
    type_str: tensor(float)
    description: The scale array along each dimension. It takes value greater than
      0. If it's less than 1, it's sampling down, otherwise, it's upsampling. The
      number of elements of 'scales' should be the same as the rank of input 'X' or
      the length of 'axes', if provided. One of 'scales' and 'sizes' MUST be specified
      and it is an error if both are specified. If 'sizes' is needed, the user can
      use an empty string as the name of 'scales' in this operator's input list.
    min_arity: 1
    tags:
      - optional
      - non-differentiable
  - name: sizes
    type_str: tensor(int64)
    description: "Target size of the output tensor. Its interpretation depends on
      the 'keep_aspect_ratio_policy' value.The number of elements of 'sizes' should
      be the same as the rank of input 'X', or the length of 'axes', if provided.
      Only one of 'scales' and 'sizes' can be specified. "
    min_arity: 1
    tags:
      - optional
      - non-differentiable
outputs:
  - name: Y
    type_str: T1
    description: N-D tensor after resizing
    min_arity: 1
    tags:
      - differentiable
type_constraints:
  - type_param_str: T1
    description: Constrain input 'X' and output 'Y' to all tensor types.
    allowed_type_strs:
      - tensor(uint8)
      - tensor(uint16)
      - tensor(uint32)
      - tensor(uint64)
      - tensor(int8)
      - tensor(int16)
      - tensor(int32)
      - tensor(int64)
      - tensor(bfloat16)
      - tensor(float16)
      - tensor(float)
      - tensor(double)
      - tensor(string)
      - tensor(bool)
      - tensor(complex64)
      - tensor(complex128)
  - type_param_str: T2
    description: Constrain roi type to float or double.
    allowed_type_strs:
      - tensor(float16)
      - tensor(float)
      - tensor(double)
support_level: COMMON
deprecated: false
