attributes:
- default_value: null
  description: 'The graph run each iteration. It has 2+N inputs: (iteration_num, condition,
    loop carried dependencies...). It has 1+N+K outputs: (condition, loop carried
    dependencies..., scan_outputs...). Each scan_output is created by concatenating
    the value of the specified output value at the end of each iteration of the loop.
    It is an error if the dimensions or data type of these scan_outputs change across
    loop iterations.'
  name: body
  required: true
  type: AttrType.GRAPH
deprecated: false
doc: "\nGeneric Looping construct. This loop has multiple termination conditions:\n\
  \n1) Trip count. Iteration count specified at runtime. Set by\n   specifying the\
  \ input M. Optional. Set to empty string to omit.\n   Note that a static trip count\
  \ (specified at graph construction time) can be\n   specified by passing in a constant\
  \ node for input M.\n2) Loop termination condition. This is an input to the op that\
  \ determines\n   whether to run the first iteration and also a loop-carried dependency\
  \ for\n   the body graph. The body graph must yield a value for the condition variable,\n\
  \   whether this input is provided or not.\n\nThis table summarizes the operating\
  \ modes of this operator with equivalent\nC-style code:\n\n    Operator inputs defined\
  \ as (max_trip_count, condition_var).\n\n    input (\"\", \"\"):\n        for (int\
  \ i=0; ; ++i) {\n          cond = ... // Note this value is ignored, but is required\
  \ in the body\n        }\n\n    input (\"\", cond) // Note this is analogous to\
  \ a while loop\n        bool cond = ...;\n        for (int i=0; cond; ++i) {\n \
  \         cond = ...;\n        }\n\n    input (\"\", 1) // Note this is analogous\
  \ to a do-while loop\n        bool cond = true\n        for (int i=0; cond; ++i)\
  \ {\n          cond = ...;\n        }\n\n    input (trip_count, \"\") // Note this\
  \ is analogous to a for loop\n        int trip_count = ...\n        for (int i=0;\
  \ i < trip_count; ++i) {\n          cond = ...; // ignored\n        }\n\n    input\
  \ (trip_count, cond)\n        int trip_count = ...;\n        bool cond = ...;\n\
  \        for (int i=0; i < trip_count && cond; ++i) {\n          cond = ...;\n \
  \       }\n\n\n*Sample usage - cond as well as trip count*\n\n    graph predict-net\
  \ {\n      %a = Constant[value = <Scalar Tensor [3]>]()\n      %b = Constant[value\
  \ = <Scalar Tensor [6]>]()\n      %keepgoing = Constant[value = <Scalar Tensor [1]>]()\n\
  \      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()\n      %keepgoing_out,\
  \ %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing,\
  \ %b)\n      return\n    }\n\n    graph body-net (\n      %i[INT32, scalar]\n  \
  \    %keepgoing[BOOL, scalar]\n      %b[INT32, scalar]\n    ) {\n      %my_local\
  \ = Add(%a, %b)\n      %b_out = Sub(%a, %b)\n      %keepgoing_out = Greater(%my_local,\
  \ %b_out)\n      %user_defined_vals = Add(%b, %b)\n      return %keepgoing_out,\
  \ %b_out, %user_defined_vals\n    }\n\n*Sample equivalent C code*\n\n    {\n   \
  \   /* User-defined code (enclosing scope) */\n      int a = 3, b = 6;\n      bool\
  \ keepgoing = true; // Analogous to input cond\n      /* End user-defined code */\n\
  \n      /* Implicitly-defined code */\n      const int max_trip_count = 10; // Analogous\
  \ to input M\n      int user_defined_vals[]; // Imagine this is resizable\n    \
  \  /* End implicitly-defined code */\n      for (int i=0; i < max_trip_count &&\
  \ keepgoing; ++i) {\n        /* User-defined code (loop body) */\n        int my_local\
  \ = a + b; // Reading values in the enclosing scope is fine\n        b = a - b;\
  \ // writes fine if we specify b as a loop-carried dependency\n        keepgoing\
  \ = my_local > b; // keepgoing is a loop-carried dependency\n        user_defined_vals[i]\
  \ = b + b;\n        /* End user-defined code */\n      }\n      // my_local = 123;\
  \ // Can't do this. my_local was defined in the body\n\n      // These below values\
  \ are live-out from the loop and therefore accessible\n      b_out; user_defined_vals;\
  \ keepgoing_out;\n    }\n\nThere are several things of note in this code snippet:\n\
  \n1) Values from the enclosing scope (i.e. variable a here) are in scope and can\n\
  \   be referenced in the inputs of the loop.\n2) Any variables which you wish to\
  \ make available in the enclosing scope (i.e.\n   the variables b and keepgoing)\
  \ must be declared as either loop-carried\n   dependencies (both at the op inputs\
  \ and output and at the body net input and\n   output) or scan_outputs.\n3) Values\
  \ created in the body cannot be accessed in the enclosing scope.\n\nNote that the\
  \ semantics of this op support \"diagonal\" or \"wavefront\" execution.\n(See Step\
  \ 3 here for an example:\nhttps://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).\n\
  Frontends should emit multi-layer RNNs as a series of While operators (with\ntime\
  \ being the inner looping dimension), with each successive layer consuming\nthe\
  \ scan_outputs from the previous layer, possibly going through several\npoint-wise\
  \ operators (e.g. dropout, residual connections, linear layer).\n"
domain: ''
inputs:
- description: A maximum trip-count for the loop specified at runtime. Optional. Pass
    empty string to skip.
  min_arity: 1
  name: M
  tags:
  - optional
  type_str: I
- description: A boolean termination condition. Optional. Pass empty string to skip.
  min_arity: 1
  name: cond
  tags:
  - optional
  type_str: B
- description: The initial values of any loop-carried dependencies (values that change
    across loop iterations)
  min_arity: 1
  name: v_initial
  tags:
  - variadic
  - heterogeneous
  type_str: V
max_input: 2147483647
max_output: 2147483647
min_input: 3
min_output: 1
name: Loop
outputs:
- description: Final N loop carried dependency values then K scan_outputs
  min_arity: 1
  name: v_final_and_scan_outputs
  tags:
  - variadic
  - heterogeneous
  type_str: V
since_version: 1
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: All Tensor types
  type_param_str: V
- allowed_type_strs:
  - tensor(int64)
  description: tensor of int64, which should be a scalar.
  type_param_str: I
- allowed_type_strs:
  - tensor(bool)
  description: tensor of bool, which should be a scalar.
  type_param_str: B
