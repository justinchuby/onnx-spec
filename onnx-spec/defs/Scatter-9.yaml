attributes:
- default_value: 0
  description: Which axis to scatter on. Negative value means counting dimensions
    from the back. Accepted range is [-r, r-1]
  name: axis
  required: false
  type: AttrType.INT
deprecated: false
doc: "\nGiven `data`, `updates` and `indices` input tensors of rank r >= 1, write\
  \ the values provided by `updates`\ninto the first input, `data`, along `axis` dimension\
  \ of `data` (by default outer-most one as axis=0) at corresponding `indices`.\n\
  For each entry in `updates`, the target index in `data` is specified by corresponding\
  \ entry in `indices`\nfor dimension = axis, and index in source for dimension !=\
  \ axis. For instance, in a 2-D tensor case,\ndata[indices[i][j]][j] = updates[i][j]\
  \ if axis = 0, or data[i][indices[i][j]] = updates[i][j] if axis = 1,\nwhere i and\
  \ j are loop counters from 0 up to the respective size in `updates` - 1.\nExample\
  \ 1:\n  data = [\n      [0.0, 0.0, 0.0],\n      [0.0, 0.0, 0.0],\n      [0.0, 0.0,\
  \ 0.0],\n  ]\n  indices = [\n      [1, 0, 2],\n      [0, 2, 1],\n  ]\n  updates\
  \ = [\n      [1.0, 1.1, 1.2],\n      [2.0, 2.1, 2.2],\n  ]\n  output = [\n     \
  \ [2.0, 1.1, 0.0]\n      [1.0, 0.0, 2.2]\n      [0.0, 2.1, 1.2]\n  ]\nExample 2:\n\
  \  data = [[1.0, 2.0, 3.0, 4.0, 5.0]]\n  indices = [[1, 3]]\n  updates = [[1.1,\
  \ 2.1]]\n  axis = 1\n  output = [[1.0, 1.1, 3.0, 2.1, 5.0]]\n"
domain: ''
inputs:
- description: Tensor of rank r >= 1.
  min_arity: 1
  name: data
  tags: []
  type_str: T
- description: Tensor of int32/int64 indices, of r >= 1 (same rank as input).
  min_arity: 1
  name: indices
  tags: []
  type_str: Tind
- description: Tensor of rank r >=1 (same rank and shape as indices)
  min_arity: 1
  name: updates
  tags: []
  type_str: T
max_input: 3
max_output: 1
min_input: 3
min_output: 1
name: Scatter
outputs:
- description: Tensor of rank r >= 1 (same rank as input).
  min_arity: 1
  name: output
  tags: []
  type_str: T
since_version: 9
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Input and output types can be of any tensor type.
  type_param_str: T
- allowed_type_strs:
  - tensor(int32)
  - tensor(int64)
  description: Constrain indices to integer types
  type_param_str: Tind
