attributes:
- default_value: null
  description: Axes that `starts` and `ends` apply to. It's optional. If not present,
    will be treated as [0, 1, ..., len(`starts`) - 1].
  name: axes
  required: false
  type: AttrType.INTS
- default_value: null
  description: Ending indices (exclusive) of corresponding axis in axes`
  name: ends
  required: true
  type: AttrType.INTS
- default_value: null
  description: Starting indices of corresponding axis in `axes`
  name: starts
  required: true
  type: AttrType.INTS
deprecated: false
doc: "\nProduces a slice of the input tensor along multiple axes. Similar to numpy:\n\
  https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html\nSlices uses `axes`,\
  \ `starts` and `ends` attributes to specify the start and end\ndimension for each\
  \ axis in the list of axes, it uses this information to\nslice the input `data`\
  \ tensor. If a negative value is passed for any of the\nstart or end indices, it\
  \ represent number of elements before the end of that\ndimension. If the value passed\
  \ to start or end is larger than the `n` (the\nnumber of elements in this dimension),\
  \ it represents `n`. For slicing to the\nend of a dimension with unknown size, it\
  \ is recommended to pass in `INT_MAX`.\nIf `axes` are omitted, they are set to `[0,\
  \ ..., ndim-1]`.\nExample 1:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n\
  \  ]\n  axes = [0, 1]\n  starts = [1, 0]\n  ends = [2, 3]\n  result = [\n      [5,\
  \ 6, 7],\n  ]\nExample 2:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n\
  \  ]\n  starts = [0, 1]\n  ends = [-1, 1000]\n  result = [\n      [2, 3, 4],\n \
  \ ]\n"
domain: ''
inputs:
- description: Tensor of data to extract slices from.
  min_arity: 1
  name: data
  tags: []
  type_str: T
max_input: 1
max_output: 1
min_input: 1
min_output: 1
name: Slice
outputs:
- description: Sliced data tensor.
  min_arity: 1
  name: output
  tags: []
  type_str: T
since_version: 1
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Constrain input and output types to all tensor types.
  type_param_str: T
