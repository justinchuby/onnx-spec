attributes:
- default_value: 0
  description: Which axis to scatter on. Negative value means counting dimensions
    from the back. Accepted range is [-r, r-1] where r = rank(data).
  name: axis
  required: false
  type: AttrType.INT
- default_value: none
  description: 'Type of reduction to apply: none (default), add, mul, max, min. ''none'':
    no reduction applied. ''add'':  reduction using the addition operation. ''mul'':
    reduction using the multiplication operation.''max'': reduction using the maximum
    operation.''min'': reduction using the minimum operation.'
  name: reduction
  required: false
  type: AttrType.STRING
deprecated: false
doc: "\nScatterElements takes three inputs `data`, `updates`, and `indices` of the\
  \ same\nrank r >= 1 and an optional attribute axis that identifies an axis of `data`\n\
  (by default, the outer-most axis, that is axis 0). The output of the operation\n\
  is produced by creating a copy of the input `data`, and then updating its value\n\
  to values specified by `updates` at specific index positions specified by\n`indices`.\
  \ Its output shape is the same as the shape of `data`.\n\nFor each entry in `updates`,\
  \ the target index in `data` is obtained by combining\nthe corresponding entry in\
  \ `indices` with the index of the entry itself: the\nindex-value for dimension =\
  \ axis is obtained from the value of the corresponding\nentry in `indices` and the\
  \ index-value for dimension != axis is obtained from the\nindex of the entry itself.\n\
  \n`reduction` allows specification of an optional reduction operation, which is\
  \ applied to all values in `updates`\ntensor into `output` at the specified `indices`.\n\
  In cases where `reduction` is set to \"none\", indices should not have duplicate\
  \ entries: that is, if idx1 != idx2,\nthen indices[idx1] != indices[idx2]. For instance,\
  \ in a 2-D tensor case, the update\ncorresponding to the [i][j] entry is performed\
  \ as below:\n```\noutput[indices[i][j]][j] = updates[i][j] if axis = 0,\noutput[i][indices[i][j]]\
  \ = updates[i][j] if axis = 1,\n```\nWhen `reduction` is set to some reduction function\
  \ `f`, the update corresponding to the [i][j] entry is performed as below:\n```\n\
  output[indices[i][j]][j] = f(output[indices[i][j]][j], updates[i][j]) if axis =\
  \ 0,\noutput[i][indices[i][j]] = f(output[i][indices[i][j]], updates[i][j]) if axis\
  \ = 1,\n```\nwhere the `f` is `+`, `*`, `max` or `min` as specified.\n\nThis operator\
  \ is the inverse of GatherElements. It is similar to Torch's Scatter operation.\n\
  \n(Opset 18 change): Adds max/min to the set of allowed reduction ops.\n\nExample\
  \ 1:\n```\ndata = [\n    [0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0],\n    [0.0, 0.0,\
  \ 0.0],\n]\nindices = [\n    [1, 0, 2],\n    [0, 2, 1],\n]\nupdates = [\n    [1.0,\
  \ 1.1, 1.2],\n    [2.0, 2.1, 2.2],\n]\noutput = [\n    [2.0, 1.1, 0.0]\n    [1.0,\
  \ 0.0, 2.2]\n    [0.0, 2.1, 1.2]\n]\n```\nExample 2:\n```\ndata = [[1.0, 2.0, 3.0,\
  \ 4.0, 5.0]]\nindices = [[1, 3]]\nupdates = [[1.1, 2.1]]\naxis = 1\noutput = [[1.0,\
  \ 1.1, 3.0, 2.1, 5.0]]\n```\n"
domain: ''
inputs:
- description: Tensor of rank r >= 1.
  min_arity: 1
  name: data
  tags:
  - differentiable
  type_str: T
- description: Tensor of int32/int64 indices, of r >= 1 (same rank as input). All
    index values are expected to be within bounds [-s, s-1] along axis of size s.
    It is an error if any of the index values are out of bounds.
  min_arity: 1
  name: indices
  tags:
  - non-differentiable
  type_str: Tind
- description: Tensor of rank r >=1 (same rank and shape as indices)
  min_arity: 1
  name: updates
  tags:
  - differentiable
  type_str: T
max_input: 3
max_output: 1
min_input: 3
min_output: 1
name: ScatterElements
outputs:
- description: Tensor of rank r >= 1 (same rank as input).
  min_arity: 1
  name: output
  tags:
  - differentiable
  type_str: T
since_version: 18
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(bfloat16)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Input and output types can be of any tensor type.
  type_param_str: T
- allowed_type_strs:
  - tensor(int32)
  - tensor(int64)
  description: Constrain indices to integer types
  type_param_str: Tind
