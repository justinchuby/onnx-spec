attributes:
- default_value: -1
  description: '(Optional) Axis along which one-hot representation in added. Default:
    axis=-1. axis=-1 means that the additional dimension will be inserted as the innermost/last
    dimension in the output tensor. Negative value means counting dimensions from
    the back. Accepted range is [-r-1, r] where r = rank(indices).'
  name: axis
  required: false
  type: AttrType.INT
deprecated: false
doc: "\n    Produces a one-hot tensor based on inputs.\n    The locations represented\
  \ by the index values in the 'indices' input tensor will have 'on_value'\n    and\
  \ the other locations will have 'off_value' in the output tensor, where 'on_value'\
  \ and 'off_value'\n    are specified as part of required input argument 'values',\
  \ which is a two-element tensor of format\n    [off_value, on_value]. The rank of\
  \ the output tensor will be one greater than the rank of the\n    input tensor.\
  \ The additional dimension is for one-hot representation. The additional dimension\
  \ will\n    be inserted at the position specified by 'axis'. If 'axis' is not specified\
  \ then then additional\n    dimension will be inserted as the innermost dimension,\
  \ i.e. axis=-1. The size of the additional\n    dimension is specified by required\
  \ scalar input 'depth'. The type of the output tensor is the same\n    as the type\
  \ of the 'values' input. Any entries in the 'indices' input tensor with values outside\n\
  \    the range [-depth, depth-1] will result in one-hot representation with all\
  \ 'off_value' values in the\n    output tensor.\n\n    when axis = 0:\n    output[input[i,\
  \ j, k], i, j, k] = 1 for all i, j, k and 0 otherwise.\n\n    when axis = -1:\n\
  \    output[i, j, k, input[i, j, k]] = 1 for all i, j, k and 0 otherwise.\n\n"
domain: ''
inputs:
- description: Input tensor containing indices. Any entries in the 'indices' input
    tensor with values outside the range [-depth, depth-1] will result in one-hot
    representation with all 'off_value' values in the output tensor.In case 'indices'
    is of non-integer type, the values will be casted to int64 before use.
  min_arity: 1
  name: indices
  tags:
  - non-differentiable
  type_str: T1
- description: Scalar or Rank 1 tensor containing exactly one element, specifying
    the number of classes in one-hot tensor. This is also the size of the one-hot
    dimension (specified by 'axis' attribute) added on in the output tensor. The values
    in the 'indices' input tensor are expected to be in the range [-depth, depth-1].
    In case 'depth' is of non-integer type, it will be casted to int64 before use.
  min_arity: 1
  name: depth
  tags:
  - non-differentiable
  type_str: T2
- description: 'Rank 1 tensor containing exactly two elements, in the format [off_value,
    on_value], where ''on_value'' is the value used for filling locations specified
    in ''indices'' input tensor, and ''off_value'' is the value used for filling locations
    other than those specified in ''indices'' input tensor. '
  min_arity: 1
  name: values
  tags:
  - non-differentiable
  type_str: T3
max_input: 3
max_output: 1
min_input: 3
min_output: 1
name: OneHot
outputs:
- description: Tensor of rank one greater than input tensor 'indices', i.e. rank(output)
    = rank(indices) + 1. The data type for the elements of the output tensor is the
    same as the type of input 'values' is used.
  min_arity: 1
  name: output
  tags:
  - non-differentiable
  type_str: T3
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input to only numeric types.
  type_param_str: T1
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input to only numeric types.
  type_param_str: T2
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Constrain to any tensor type.
  type_param_str: T3
