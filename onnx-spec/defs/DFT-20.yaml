domain: ''
name: DFT
since_version: 20
min_input: 1
max_input: 3
min_output: 1
max_output: 1
doc: 'Computes the discrete Fourier Transform (DFT) of the input.


  Assuming the input has shape `[M, N]`, where `N` is the dimension over which the

  DFT is computed and `M` denotes the conceptual "all other dimensions,"

  the DFT `y[m, k]` of shape `[M, N]` is defined as


  $$y[m, k] = \sum_{n=0}^{N-1} e^{-2 \pi j \frac{k n}{N} } x[m, n] ,$$


  and the inverse transform is defined as


  $$x[m, n] = \frac{1}{N} \sum_{k=0}^{N-1} e^{2 \pi j \frac{k n}{N} } y[m, k] ,$$


  where $j$ is the imaginary unit.


  The actual shape of the output is specified in the "output" section.


  Reference: https://docs.scipy.org/doc/scipy/tutorial/fft.html

  '
attributes:
- name: inverse
  description: Whether to perform the inverse discrete Fourier Transform. Default
    is 0, which corresponds to `false`.
  type: AttrType.INT
  required: false
  default_value: 0
- name: onesided
  description: If `onesided` is `1` and input is real, only values for `k` in `[0,
    1, 2, ..., floor(n_fft/2) + 1]` are returned because the real-to-complex Fourier
    transform satisfies the conjugate symmetry, i.e., `X[m, k] = X[m, n_fft-k]*`,
    where `m` denotes "all other dimensions" DFT was not applied on. If the input
    tensor is complex, onesided output is not possible. Value can be `0` or `1`. Default
    is `0`.
  type: AttrType.INT
  required: false
  default_value: 0
inputs:
- name: input
  type_str: T1
  description: 'For real input, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][1]`.
    For complex input, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]`.
    The final dimension represents the real and imaginary parts of the value in that
    order.'
  min_arity: 1
  tags:
  - non-differentiable
- name: dft_length
  type_str: T2
  description: 'The length of the signal as a scalar. If greater than the axis dimension,
    the signal will be zero-padded up to `dft_length`. If less than the axis dimension,
    only the first `dft_length` values will be used as the signal. '
  min_arity: 1
  tags:
  - optional
  - non-differentiable
- name: axis
  type_str: tensor(int64)
  description: The axis as a scalar on which to perform the DFT. Default is `-2` (last
    signal axis). Negative value means counting dimensions from the back. Accepted
    range is $[-r, -2] \cup [0, r-2]$ where `r = rank(input)`. The last dimension
    is for representing complex numbers and thus is an invalid axis.
  min_arity: 1
  tags:
  - optional
  - non-differentiable
outputs:
- name: output
  type_str: T1
  description: 'The Fourier Transform of the input vector. If `onesided` is `0`, the
    following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]`.
    If `axis=0` and `onesided` is `1`, the following shape is expected: `[floor(signal_dim0/2)+1][signal_dim1][signal_dim2]...[signal_dimN][2]`.
    If `axis=1` and `onesided` is `1`, the following shape is expected: `[signal_dim0][floor(signal_dim1/2)+1][signal_dim2]...[signal_dimN][2]`.
    If `axis=N` and `onesided` is `1`, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[floor(signal_dimN/2)+1][2]`.
    The `signal_dim` at the specified `axis` is equal to the `dft_length`.'
  min_arity: 1
  tags: []
type_constraints:
- type_param_str: T1
  description: Constrain input and output types to float tensors.
  allowed_type_strs:
  - tensor(bfloat16)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
- type_param_str: T2
  description: Constrain scalar length types to integers.
  allowed_type_strs:
  - tensor(int32)
  - tensor(int64)
support_level: COMMON
deprecated: false
