domain: ''
name: LSTM
since_version: 7
min_input: 3
max_input: 8
min_output: 0
max_output: 3
doc: "\nComputes an one-layer LSTM. This operator is usually supported via some\n\
  custom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i`\
  \ - input gate\n\n`o` - output gate\n\n`f` - forget gate\n\n`c` - cell gate\n\n\
  `t` - time step (t-1 means previous time step)\n\n`W[iofc]` - W parameter weight\
  \ matrix for input, output, forget, and cell gates\n\n`R[iofc]` - R recurrence weight\
  \ matrix for input, output, forget, and cell gates\n\n`Wb[iofc]` - W bias vectors\
  \ for input, output, forget, and cell gates\n\n`Rb[iofc]` - R bias vectors for input,\
  \ output, forget, and cell gates\n\n`P[iof]`  - P peephole weight vector for input,\
  \ output, and forget gates\n\n`WB[iofc]` - W parameter weight matrix for backward\
  \ input, output, forget, and cell gates\n\n`RB[iofc]` - R recurrence weight matrix\
  \ for backward input, output, forget, and cell gates\n\n`WBb[iofc]` - W bias vectors\
  \ for backward input, output, forget, and cell gates\n\n`RBb[iofc]` - R bias vectors\
  \ for backward input, output, forget, and cell gates\n\n`PB[iof]`  - P peephole\
  \ weight vector for backward input, output, and forget gates\n\n`H` - Hidden state\n\
  \n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\
  \n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1\
  \ + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are\
  \ optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)     \
  \      - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha\
  \ else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)  \
  \       - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >=\
  \ 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)\
  \            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh, h=Tanh):\n\
  \n  - it = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Pi (.) Ct-1 + Wbi + Rbi)\n\n  - ft = f(Xt*(Wf^T)\
  \ + Ht-1*(Rf^T) + Pf (.) Ct-1 + Wbf + Rbf)\n\n  - ct = g(Xt*(Wc^T) + Ht-1*(Rc^T)\
  \ + Wbc + Rbc)\n\n  - Ct = ft (.) Ct-1 + it (.) ct\n\n  - ot = f(Xt*(Wo^T) + Ht-1*(Ro^T)\
  \ + Po (.) Ct + Wbo + Rbo)\n\n  - Ht = ot (.) h(Ct)\nThis operator has **optional**\
  \ inputs/outputs. See [the doc](IR.md) for more details about the representation\
  \ of optional arguments. An empty string may be used in the place of an actual argument's\
  \ name to indicate a missing argument. Trailing optional arguments (those not followed\
  \ by an argument that is present) may also be simply omitted.\n"
attributes:
- name: activation_alpha
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.For example with
    LeakyRelu, the default alpha is 0.01.
  type: AttrType.FLOATS
  required: false
  default_value: null
- name: activation_beta
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.
  type: AttrType.FLOATS
  required: false
  default_value: null
- name: activations
  description: 'A list of 3 (or 6 if bidirectional) activation functions for input,
    output, forget, cell, and hidden. The activation functions must be one of the
    activation functions specified above. Optional: See the equations for default
    if not specified.'
  type: AttrType.STRINGS
  required: false
  default_value: null
- name: clip
  description: Cell clip threshold. Clipping bounds the elements of a tensor in the
    range of [-threshold, +threshold] and is applied to the input of activations.
    No clip if not specified.
  type: AttrType.FLOAT
  required: false
  default_value: null
- name: direction
  description: Specify if the RNN is forward, reverse, or bidirectional. Must be one
    of forward (default), reverse, or bidirectional.
  type: AttrType.STRING
  required: false
  default_value: forward
- name: hidden_size
  description: Number of neurons in the hidden layer
  type: AttrType.INT
  required: false
  default_value: null
- name: input_forget
  description: Couple the input and forget gates if 1.
  type: AttrType.INT
  required: false
  default_value: 0
inputs:
- name: X
  type_str: T
  description: The input sequences packed (and potentially padded) into one 3-D tensor
    with the shape of `[seq_length, batch_size, input_size]`.
  min_arity: 1
  tags: []
- name: W
  type_str: T
  description: The weight tensor for the gates. Concatenation of `W[iofc]` and `WB[iofc]`
    (if bidirectional) along dimension 0. The tensor has shape `[num_directions, 4*hidden_size,
    input_size]`.
  min_arity: 1
  tags: []
- name: R
  type_str: T
  description: The recurrence weight tensor. Concatenation of `R[iofc]` and `RB[iofc]`
    (if bidirectional) along dimension 0. This tensor has shape `[num_directions,
    4*hidden_size, hidden_size]`.
  min_arity: 1
  tags: []
- name: B
  type_str: T
  description: 'The bias tensor for input gate. Concatenation of `[Wb[iofc], Rb[iofc]]`,
    and `[WBb[iofc], RBb[iofc]]` (if bidirectional) along dimension 0. This tensor
    has shape `[num_directions, 8*hidden_size]`. Optional: If not specified - assumed
    to be 0.'
  min_arity: 1
  tags:
  - optional
- name: sequence_lens
  type_str: T1
  description: Optional tensor specifying lengths of the sequences in a batch. If
    not specified - assumed all sequences in the batch to have length `seq_length`.
    It has shape `[batch_size]`.
  min_arity: 1
  tags:
  - optional
- name: initial_h
  type_str: T
  description: Optional initial value of the hidden. If not specified - assumed to
    be 0. It has shape `[num_directions, batch_size, hidden_size]`.
  min_arity: 1
  tags:
  - optional
- name: initial_c
  type_str: T
  description: Optional initial value of the cell. If not specified - assumed to be
    0. It has shape `[num_directions, batch_size, hidden_size]`.
  min_arity: 1
  tags:
  - optional
- name: P
  type_str: T
  description: 'The weight tensor for peepholes. Concatenation of `P[iof]` and `PB[iof]`
    (if bidirectional) along dimension 0. It has shape `[num_directions, 3*hidde_size]`.
    Optional: If not specified - assumed to be 0.'
  min_arity: 1
  tags:
  - optional
outputs:
- name: Y
  type_str: T
  description: 'A tensor that concats all the intermediate output values of the hidden.
    It has shape `[seq_length, num_directions, batch_size, hidden_size]`. '
  min_arity: 1
  tags:
  - optional
- name: Y_h
  type_str: T
  description: The last output value of the hidden. It has shape `[num_directions,
    batch_size, hidden_size]`.
  min_arity: 1
  tags:
  - optional
- name: Y_c
  type_str: T
  description: The last output value of the cell. It has shape `[num_directions, batch_size,
    hidden_size]`.
  min_arity: 1
  tags:
  - optional
type_constraints:
- type_param_str: T
  description: Constrain input and output types to float tensors.
  allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
- type_param_str: T1
  description: Constrain seq_lens to integer tensor.
  allowed_type_strs:
  - tensor(int32)
support_level: COMMON
deprecated: false
