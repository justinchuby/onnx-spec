attributes:
- default_value: SUM
  description: Defines how to aggregate leaf values within a target. <br>One of 'AVERAGE,'
    'SUM,' 'MIN,' 'MAX.'
  name: aggregate_function
  required: false
  type: AttrType.STRING
- default_value: null
  description: Base values for classification, added to final class score; the size
    must be the same as the classes or can be left unassigned (assumed 0)
  name: base_values
  required: false
  type: AttrType.FLOATS
- default_value: null
  description: The total number of targets.
  name: n_targets
  required: false
  type: AttrType.INT
- default_value: null
  description: Child node if expression is false
  name: nodes_falsenodeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: Feature id for each node.
  name: nodes_featureids
  required: false
  type: AttrType.INTS
- default_value: null
  description: Popularity of each node, used for performance and may be omitted.
  name: nodes_hitrates
  required: false
  type: AttrType.FLOATS
- default_value: null
  description: 'For each node, define what to do in the presence of a NaN: use the
    ''true'' (if the attribute value is 1) or ''false'' (if the attribute value is
    0) branch based on the value in this array.<br>This attribute may be left undefined
    and the default value is false (0) for all nodes.'
  name: nodes_missing_value_tracks_true
  required: false
  type: AttrType.INTS
- default_value: null
  description: The node kind, that is, the comparison to make at the node. There is
    no comparison to make at a leaf node.<br>One of 'BRANCH_LEQ', 'BRANCH_LT', 'BRANCH_GTE',
    'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ', 'LEAF'
  name: nodes_modes
  required: false
  type: AttrType.STRINGS
- default_value: null
  description: Node id for each node. Node ids must restart at zero for each tree
    and increase sequentially.
  name: nodes_nodeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: Tree id for each node.
  name: nodes_treeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: Child node if expression is true
  name: nodes_truenodeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: Thresholds to do the splitting on for each node.
  name: nodes_values
  required: false
  type: AttrType.FLOATS
- default_value: NONE
  description: Indicates the transform to apply to the score. <br>One of 'NONE,' 'SOFTMAX,'
    'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
  name: post_transform
  required: false
  type: AttrType.STRING
- default_value: null
  description: The index of the target that each weight is for
  name: target_ids
  required: false
  type: AttrType.INTS
- default_value: null
  description: The node id of each weight
  name: target_nodeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: The id of the tree that each node is in.
  name: target_treeids
  required: false
  type: AttrType.INTS
- default_value: null
  description: The weight for each target
  name: target_weights
  required: false
  type: AttrType.FLOATS
deprecated: false
doc: "\n    Tree Ensemble regressor.  Returns the regressed values for each input\
  \ in N.\n\n    All args with nodes_ are fields of a tuple of tree nodes, and\n \
  \   it is assumed they are the same length, and an index i will decode the\n   \
  \ tuple across these inputs.  Each node id can appear only once\n    for each tree\
  \ id.\n\n    All fields prefixed with target_ are tuples of votes at the leaves.\n\
  \n    A leaf may have multiple votes, where each vote is weighted by\n    the associated\
  \ target_weights index.\n\n    All trees must have their node ids start at 0 and\
  \ increment by 1.\n\n    Mode enum is BRANCH_LEQ, BRANCH_LT, BRANCH_GTE, BRANCH_GT,\
  \ BRANCH_EQ, BRANCH_NEQ, LEAF\n"
domain: ai.onnx.ml
inputs:
- description: Input of shape [N,F]
  min_arity: 1
  name: X
  tags: []
  type_str: T
max_input: 1
max_output: 1
min_input: 1
min_output: 1
name: TreeEnsembleRegressor
outputs:
- description: N classes
  min_arity: 1
  name: Y
  tags: []
  type_str: tensor(float)
since_version: 1
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float)
  - tensor(double)
  - tensor(int64)
  - tensor(int32)
  description: The input type must be a tensor of a numeric type.
  type_param_str: T
