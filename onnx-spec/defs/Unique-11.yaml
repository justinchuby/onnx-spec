attributes:
- default_value: null
  description: (Optional) The dimension to apply unique. If not specified, the unique
    elements of the flattened input are returned. Negative value means counting dimensions
    from the back. Accepted range is [-r, r-1] where r = rank(input).
  name: axis
  required: false
  type: AttrType.INT
- default_value: 1
  description: (Optional) Whether to sort the unique elements in ascending order before
    returning as output. Must be one of 0, or 1 (default).
  name: sorted
  required: false
  type: AttrType.INT
deprecated: false
doc: "\nFind the unique elements of a tensor. When an optional attribute 'axis' is\
  \ provided, unique subtensors sliced along the 'axis' are returned.\nOtherwise the\
  \ input tensor is flattened and unique values of the flattened tensor are returned.\n\
  \nThis operator returns the unique values or sliced unique subtensors of the input\
  \ tensor and three optional outputs.\nThe first output tensor 'Y' contains all unique\
  \ values or subtensors of the input.\nThe second optional output tensor 'indices'\
  \ contains indices of 'Y' elements' first occurrence in 'X'.\nThe third optional\
  \ output tensor 'inverse_indices' contains, for elements of 'X', its corresponding\
  \ indices in 'Y'.\nThe fourth optional output tensor 'counts' contains the count\
  \ of each element of 'Y' in the input.\n\nOutputs are either sorted in ascending\
  \ order or optionally in the order of the first occurrence of the values in the\
  \ input.\n\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html\n\
  \nExample 1:\n```\ninput_X = [2, 1, 1, 3, 4, 3]\nattribute_sorted = 0\nattribute_axis\
  \ = None\noutput_Y = [2, 1, 3, 4]\noutput_indices = [0, 1, 3, 4]\noutput_inverse_indices\
  \ = [0, 1, 1, 2, 3, 2]\noutput_counts = [1, 2, 2, 1]\n```\n\nExample 2:\n```\ninput_X\
  \ = [[1, 3], [2, 3]]\nattribute_sorted = 1\nattribute_axis = None\noutput_Y = [1,\
  \ 2, 3]\noutput_indices = [0, 2, 1]\noutput_inverse_indices = [0, 2, 1, 2]\noutput_counts\
  \ = [1, 1, 2]\n```\n\nExample 3:\n```\ninput_X = [[1, 0, 0], [1, 0, 0], [2, 3, 4]]\n\
  attribute_sorted = 1\nattribute_axis = 0\noutput_Y = [[1, 0, 0], [2, 3, 4]]\noutput_indices\
  \ = [0, 2]\noutput_inverse_indices = [0, 0, 1]\noutput_counts = [2, 1]\n```\n\n\
  Example 4:\n```\ninput_x = [[[1., 1.], [0., 1.], [2., 1.], [0., 1.]],\n        \
  \    [[1., 1.], [0., 1.], [2., 1.], [0., 1.]]]\nattribute_sorted = 1\nattribute_axis\
  \ = 1\n```\n\nintermediate data are presented below for better understanding:\n\
  there are 4 subtensors sliced along axis 1 of input_x (shape = (2, 4, 2)):\n```\n\
  A: [[1, 1], [1, 1]],\n   [[0, 1], [0, 1]],\n   [[2, 1], [2, 1]],\n   [[0, 1], [0,\
  \ 1]].\n```\n\nthere are 3 unique subtensors:\n```\n[[1, 1], [1, 1]],\n[[0, 1],\
  \ [0, 1]],\n[[2, 1], [2, 1]].\n```\n\nsorted unique subtensors:\n```\nB: [[0, 1],\
  \ [0, 1]],\n   [[1, 1], [1, 1]],\n   [[2, 1], [2, 1]].\n```\n\noutput_Y is constructed\
  \ from B:\n```\n[[[0. 1.], [1. 1.], [2. 1.]],\n [[0. 1.], [1. 1.], [2. 1.]]]\n```\n\
  \noutput_indices is to map from B to A:\n```\n[1, 0, 2]\n```\n\noutput_inverse_indices\
  \ is to map from A to B:\n```\n[1, 0, 2, 0]\n```\n\noutput_counts:\n```\n[2, 1,\
  \ 1]\n```\n"
domain: ''
inputs:
- description: A N-D input tensor that is to be processed.
  min_arity: 1
  name: X
  tags:
  - non-differentiable
  type_str: T
max_input: 1
max_output: 4
min_input: 1
min_output: 1
name: Unique
outputs:
- description: A tensor of the same type as 'X' containing all the unique values or
    subtensors sliced along a provided 'axis' in 'X', either sorted or maintained
    in the same order they occur in input 'X'
  min_arity: 1
  name: Y
  tags:
  - non-differentiable
  type_str: T
- description: 'A 1-D INT64 tensor containing indices of ''Y'' elements'' first occurrence
    in ''X''. When ''axis'' is provided, it contains indices to subtensors in input
    ''X'' on the ''axis''. When ''axis'' is not provided, it contains indices to values
    in the flattened input tensor. '
  min_arity: 1
  name: indices
  tags:
  - optional
  - non-differentiable
  type_str: tensor(int64)
- description: 'A 1-D INT64 tensor containing, for elements of ''X'', its corresponding
    indices in ''Y''. When ''axis'' is provided, it contains indices to subtensors
    in output ''Y'' on the ''axis''. When ''axis'' is not provided, it contains indices
    to values in output ''Y''. '
  min_arity: 1
  name: inverse_indices
  tags:
  - optional
  - non-differentiable
  type_str: tensor(int64)
- description: A 1-D INT64 tensor containing the count of each element of 'Y' in input
    'X'
  min_arity: 1
  name: counts
  tags:
  - optional
  - non-differentiable
  type_str: tensor(int64)
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Input can be of any tensor type.
  type_param_str: T
