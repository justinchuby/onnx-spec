attributes:
- default_value: null
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.For example with
    LeakyRelu, the default alpha is 0.01.
  name: activation_alpha
  required: false
  type: AttrType.FLOATS
- default_value: null
  description: Optional scaling values used by some activation functions. The values
    are consumed in the order of activation functions, for example (f, g, h) in LSTM.
    Default values are the same as of corresponding ONNX operators.
  name: activation_beta
  required: false
  type: AttrType.FLOATS
- default_value:
  - Tanh
  - Tanh
  description: 'One (or two if bidirectional) activation function for input gate.
    The activation function must be one of the activation functions specified above.
    Optional: Default `Tanh` if not specified.'
  name: activations
  required: false
  type: AttrType.STRINGS
- default_value: null
  description: Cell clip threshold. Clipping bounds the elements of a tensor in the
    range of [-threshold, +threshold] and is applied to the input of activations.
    No clip if not specified.
  name: clip
  required: false
  type: AttrType.FLOAT
- default_value: forward
  description: Specify if the RNN is forward, reverse, or bidirectional. Must be one
    of forward (default), reverse, or bidirectional.
  name: direction
  required: false
  type: AttrType.STRING
- default_value: null
  description: Number of neurons in the hidden layer
  name: hidden_size
  required: false
  type: AttrType.INT
deprecated: false
doc: "\nComputes an one-layer simple RNN. This operator is usually supported\nvia\
  \ some custom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\
  \n`i` - input gate\n\n`t` - time step (t-1 means previous time step)\n\n`Wi` - W\
  \ parameter weight matrix for input gate\n\n`Ri` - R recurrence weight matrix for\
  \ input gate\n\n`Wbi` - W parameter bias vector for input gate\n\n`Rbi` - R parameter\
  \ bias vector for input gate\n\n`WBi` - W parameter weight matrix for backward input\
  \ gate\n\n`RBi` - R recurrence weight matrix for backward input gate\n\n`WBbi` -\
  \ WR bias vectors for backward input gate\n\n`RBbi` - RR bias vectors for backward\
  \ input gate\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional\
  \ else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)\
  \                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1\
  \ + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x\
  \ + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)\
  \     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\
  \n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)        \
  \         - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1\
  \ + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Tanh):\n\
  \n  - Ht = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)\nThis operator has **optional**\
  \ inputs/outputs. See [the doc](IR.md) for more details about the representation\
  \ of optional arguments. An empty string may be used in the place of an actual argument's\
  \ name to indicate a missing argument. Trailing optional arguments (those not followed\
  \ by an argument that is present) may also be simply omitted.\n"
domain: ''
inputs:
- description: The input sequences packed (and potentially padded) into one 3-D tensor
    with the shape of `[seq_length, batch_size, input_size]`.
  min_arity: 1
  name: X
  tags: []
  type_str: T
- description: The weight tensor for input gate. Concatenation of `Wi` and `WBi` (if
    bidirectional). The tensor has shape `[num_directions, hidden_size, input_size]`.
  min_arity: 1
  name: W
  tags: []
  type_str: T
- description: The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if bidirectional).
    The tensor has shape `[num_directions, hidden_size, hidden_size]`.
  min_arity: 1
  name: R
  tags: []
  type_str: T
- description: 'The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and
    `[WBbi, RBbi]` (if bidirectional). The tensor has shape `[num_directions, 2*hidden_size]`.
    Optional: If not specified - assumed to be 0.'
  min_arity: 1
  name: B
  tags:
  - optional
  type_str: T
- description: Optional tensor specifying lengths of the sequences in a batch. If
    not specified - assumed all sequences in the batch to have length `seq_length`.
    It has shape `[batch_size]`.
  min_arity: 1
  name: sequence_lens
  tags:
  - optional
  type_str: T1
- description: Optional initial value of the hidden. If not specified - assumed to
    be 0. It has shape `[num_directions, batch_size, hidden_size]`.
  min_arity: 1
  name: initial_h
  tags:
  - optional
  type_str: T
max_input: 6
max_output: 2
min_input: 3
min_output: 0
name: RNN
outputs:
- description: 'A tensor that concats all the intermediate output values of the hidden.
    It has shape `[seq_length, num_directions, batch_size, hidden_size]`. '
  min_arity: 1
  name: Y
  tags:
  - optional
  type_str: T
- description: The last output value of the hidden. It has shape `[num_directions,
    batch_size, hidden_size]`.
  min_arity: 1
  name: Y_h
  tags:
  - optional
  type_str: T
since_version: 7
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to float tensors.
  type_param_str: T
- allowed_type_strs:
  - tensor(int32)
  description: Constrain seq_lens to integer tensor.
  type_param_str: T1
