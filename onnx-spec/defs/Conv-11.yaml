attributes:
- default_value: NOTSET
  description: auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where
    default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER
    mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])`
    for each axis `i`. The padding is split between the two sides equally or almost
    equally (depending on whether it is even or odd). In case the padding is an odd
    number, the extra padding is added at the end for SAME_UPPER and at the beginning
    for SAME_LOWER.
  name: auto_pad
  required: false
  type: AttrType.STRING
- default_value: null
  description: dilation value along each spatial axis of the filter. If not present,
    the dilation defaults is 1 along each spatial axis.
  name: dilations
  required: false
  type: AttrType.INTS
- default_value: 1
  description: number of groups input channels and output channels are divided into.
  name: group
  required: false
  type: AttrType.INT
- default_value: null
  description: The shape of the convolution kernel. If not present, should be inferred
    from input W.
  name: kernel_shape
  required: false
  type: AttrType.INTS
- default_value: null
  description: Padding for the beginning and ending along each spatial axis, it can
    take any value greater than or equal to 0. The value represent the number of pixels
    added to the beginning and end part of the corresponding axis. `pads` format should
    be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number
    of pixels added at the beginning of axis `i` and xi_end, the number of pixels
    added at the end of axis `i`. This attribute cannot be used simultaneously with
    auto_pad attribute. If not present, the padding defaults to 0 along start and
    end of each spatial axis.
  name: pads
  required: false
  type: AttrType.INTS
- default_value: null
  description: Stride along each spatial axis. If not present, the stride defaults
    is 1 along each spatial axis.
  name: strides
  required: false
  type: AttrType.INTS
deprecated: false
doc: '

  The convolution operator consumes an input tensor and a filter, and

  computes the output.'
domain: ''
inputs:
- description: Input data tensor from previous layer; has size (N x C x H x W), where
    N is the batch size, C is the number of channels, and H and W are the height and
    width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x
    D2 ... x Dn). Optionally, if dimension denotation is in effect, the operation
    expects input data tensor to arrive with the dimension denotation of [DATA_BATCH,
    DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].
  min_arity: 1
  name: X
  tags:
  - differentiable
  type_str: T
- description: The weight tensor that will be used in the convolutions; has size (M
    x C/group x kH x kW), where C is the number of channels, and kH and kW are the
    height and width of the kernel, and M is the number of feature maps. For more
    than 2 dimensions, the kernel shape will be (M x C/group x k1 x k2 x ... x kn),
    where (k1 x k2 x ... kn) is the dimension of the kernel. Optionally, if dimension
    denotation is in effect, the operation expects the weight tensor to arrive with
    the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL,
    FILTER_SPATIAL ...]. Assuming zero based indices for the shape array, X.shape[1]
    == (W.shape[1] * group) == C and W.shape[0] mod G == 0. Or in other words FILTER_IN_CHANNEL
    multiplied by the number of groups should be equal to DATA_CHANNEL and the number
    of feature maps M should be a multiple of the number of groups G.
  min_arity: 1
  name: W
  tags:
  - differentiable
  type_str: T
- description: Optional 1D bias to be added to the convolution, has size of M.
  min_arity: 1
  name: B
  tags:
  - optional
  - differentiable
  type_str: T
max_input: 3
max_output: 1
min_input: 2
min_output: 1
name: Conv
outputs:
- description: Output data tensor that contains the result of the convolution. The
    output dimensions are functions of the kernel size, stride size, and pad lengths.
  min_arity: 1
  name: Y
  tags:
  - differentiable
  type_str: T
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to float tensors.
  type_param_str: T
