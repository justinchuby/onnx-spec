attributes:
- default_value: 0
  description: if align_corners=1, consider -1 and 1 to refer to the centers of the
    corner pixels. if align_corners=0, consider -1 and 1 to refer to the outer edge
    the corner pixels.
  name: align_corners
  required: false
  type: AttrType.INT
deprecated: false
doc: "\nGenerates a 2D or 3D flow field (sampling grid), given a batch of affine matrices\
  \ theta\n(https://pytorch.org/docs/stable/generated/torch.nn.functional.affine_grid.html).\n\
  An affine matrix `theta` is applied to a position tensor represented in its homogeneous\
  \ expression. Here is an example in 3D:\n```\n[r00, r01, r02, t0]   [x]   [x']\n\
  [r10, r11, r12, t1] * [y] = [y']\n[r20, r21, r22, t2]   [z]   [z']\n[0,   0,   0,\
  \   1 ]   [1]   [1 ]\n```\nwhere `(x, y, z)` is the position in the original space,\
  \ `(x', y', z')` is the position in the output space.\nThe last row is always `[0,\
  \ 0, 0, 1]` and is not stored in the affine matrix. Therefore we have `theta` of\
  \ shape `(N, 2, 3)` for 2D or `(N, 3, 4)` for 3D.\n\nInput `size` is used to define\
  \ grid of positions evenly spaced in the original 2D or 3D space, with dimensions\
  \ ranging from `-1` to `1`.\nThe output `grid` contains positions in the output\
  \ space.\n\nWhen `align_corners=1`, consider `-1` and `1` to refer to the centers\
  \ of the corner pixels (mark `v` in illustration).\n```\nv            v        \
  \    v            v\n|-------------------|------------------|\n-1              \
  \    0                  1\n```\nWhen `align_corners=0`, consider `-1` and `1` to\
  \ refer to the outer edge of the corner pixels.\n```\n    v        v         v \
  \        v\n|------------------|-------------------|\n-1                 0     \
  \              1\n```\n"
domain: ''
inputs:
- description: input batch of affine matrices with shape (N, 2, 3) for 2D or (N, 3,
    4) for 3D
  min_arity: 1
  name: theta
  tags:
  - non-differentiable
  type_str: T1
- description: the target output image size (N, C, H, W) for 2D or (N, C, D, H, W)
    for 3D
  min_arity: 1
  name: size
  tags:
  - non-differentiable
  type_str: T2
max_input: 2
max_output: 1
min_input: 2
min_output: 1
name: AffineGrid
outputs:
- description: output tensor of shape (N, H, W, 2) of 2D sample coordinates or (N,
    D, H, W, 3) of 3D sample coordinates.
  min_arity: 1
  name: grid
  tags:
  - differentiable
  type_str: T1
since_version: 20
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(bfloat16)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain grid types to float tensors.
  type_param_str: T1
- allowed_type_strs:
  - tensor(int64)
  description: Constrain size's type to int64 tensors.
  type_param_str: T2
