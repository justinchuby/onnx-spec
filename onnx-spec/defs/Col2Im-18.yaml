attributes:
- default_value: null
  description: 1-dimensional tensor with dilation value along each spatial axis of
    the image. If not present, the dilation defaults to 1 along each spatial axis
    of the image.
  name: dilations
  required: false
  type: AttrType.INTS
- default_value: null
  description: 1-dimensional tensor with padding value for the beginning and ending
    along each spatial axis, it can take any value greater than or equal to 0. The
    value represent the number of pixels added to the beginning and end part of the
    corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end,
    x2_end,...], where xi_begin is the number of pixels added at the beginning of
    axis `i` and xi_end is the number of pixels added at the end of axis `i`. If not
    present, the padding defaults to 0 along start and end of each spatial axis.
  name: pads
  required: false
  type: AttrType.INTS
- default_value: null
  description: 1-dimensional tensor with stride value along each spatial axis. If
    not present, the stride defaults to 1 along each spatial axis.
  name: strides
  required: false
  type: AttrType.INTS
deprecated: false
doc: "\nThe operator rearranges column blocks back into a multidimensional image\n\
  \nCol2Im behaves similarly to PyTorch's fold https://pytorch.org/docs/stable/generated/torch.nn.Fold.html,\n\
  but it only supports *batched* multi-dimensional image tensors.\nAnother implementation\
  \ in Python with N-dimension support can be found at https://github.com/f-dangel/unfoldNd/.\n\
  \nNOTE:\n  Although specifying image_shape looks redundant because it could be calculated\
  \ from\n  convolution formulas, it is required as input for more advanced scenarios\
  \ as explained\n  at PyTorch's implementation (https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Col2Im.cpp#L10)\n"
domain: ''
inputs:
- description: Input data tensor to be rearranged from column blocks back into an
    image. This is a 3-dimensional tensor containing [N, C * n-ary-product(block_shape),
    L], where N is batch dimension, C is image channel dimension and L is number of
    blocks.The blocks are enumerated in increasing lexicographic-order of their indices.For
    example, with an image-size 10*20 and block-size 9*18, there would be 2*3 blocks,
    enumerated in the order block(0, 0), block(0, 1), block(0, 2), block(1, 0), block(1,
    1), block(1, 2).
  min_arity: 1
  name: input
  tags:
  - differentiable
  type_str: T
- description: The shape of the spatial dimensions of the image after rearranging
    the column blocks.This is a 1-dimensional tensor with size of at least 2, containing
    the value [H_img, W_img]  for a 2-D image or [dim_i1, dim_i2, ..., dim_iN] for
    a N-D image.
  min_arity: 1
  name: image_shape
  tags:
  - non-differentiable
  type_str: tensor(int64)
- description: The shape of the block to apply on the input.This is a 1-dimensional
    tensor of size of at least 2, containing the value [H_block, W_block]  for a 2-D
    image or [dim_b1, dim_b2, ..., dim_bN] for a N-D block.This is the block-shape
    before dilation is applied to it.
  min_arity: 1
  name: block_shape
  tags:
  - non-differentiable
  type_str: tensor(int64)
max_input: 3
max_output: 1
min_input: 3
min_output: 1
name: Col2Im
outputs:
- description: Output tensor produced by rearranging blocks into an image.
  min_arity: 1
  name: output
  tags:
  - differentiable
  type_str: T
since_version: 18
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(uint8)
  - tensor(uint16)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int8)
  - tensor(int16)
  - tensor(int32)
  - tensor(int64)
  - tensor(bfloat16)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(string)
  - tensor(bool)
  - tensor(complex64)
  - tensor(complex128)
  description: Constrain input and output types to all numeric tensor types.
  type_param_str: T
