attributes:
- default_value: null
  description: If set, defines the broadcast dimensions. See doc for details.
  name: axis
  required: false
  type: AttrType.INT
- default_value: 0
  description: Pass 1 to enable broadcasting
  name: broadcast
  required: false
  type: AttrType.INT
- default_value: null
  description: legacy optimization attribute.
  name: consumed_inputs
  required: false
  type: AttrType.INTS
deprecated: false
doc: "\nPerforms element-wise binary division (with limited broadcast support).\n\n\
  If necessary the right-hand-side argument will be broadcasted to match the\nshape\
  \ of left-hand-side argument. When broadcasting is specified, the second\ntensor\
  \ can either be of element size 1 (including a scalar tensor and any\ntensor with\
  \ rank equal to or smaller than the first tensor), or having its\nshape as a contiguous\
  \ subset of the first tensor's shape. The starting of the\nmutually equal shape\
  \ is specified by the argument \"axis\", and if it is not set,\nsuffix matching\
  \ is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor\
  \ shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B)\
  \ = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1),\
  \ i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A)\
  \ = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4),\
  \ with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute\
  \ `broadcast=1` needs to be passed to enable broadcasting.\n"
domain: ''
inputs:
- description: First operand, should share the type with the second operand.
  min_arity: 1
  name: A
  tags: []
  type_str: T
- description: Second operand. With broadcasting can be of smaller size than A. If
    broadcasting is disabled it should be of the same size.
  min_arity: 1
  name: B
  tags: []
  type_str: T
max_input: 2
max_output: 1
min_input: 2
min_output: 1
name: Div
outputs:
- description: Result, has same dimensions and type as A
  min_arity: 1
  name: C
  tags: []
  type_str: T
since_version: 1
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to float tensors.
  type_param_str: T
