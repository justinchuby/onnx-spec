domain: ''
name: MaxPool
since_version: 11
min_input: 1
max_input: 1
min_output: 1
max_output: 2
doc: '

  MaxPool consumes an input tensor X and applies max pooling across

  the tensor according to kernel sizes, stride sizes, and pad lengths.

  max pooling consisting of computing the max on all values of a

  subset of the input tensor according to the kernel size and downsampling the

  data into the output tensor Y for further processing. The output spatial shape will
  be following:

  ```

  output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - ((kernel_spatial_shape[i]
  - 1) * dilations[i] + 1)) / strides_spatial_shape[i] + 1)

  ```

  or

  ```

  output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - ((kernel_spatial_shape[i]
  - 1) * dilations[i] + 1)) / strides_spatial_shape[i] + 1)

  ```

  if ceil_mode is enabled


  ```

  * pad_shape[i] is sum of pads along axis i

  ```


  `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output
  spatial shape will be following:

  ```

  VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - ((kernel_spatial_shape[i]
  - 1) * dilations[i] + 1) + 1) / strides_spatial_shape[i])

  SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i]
  / strides_spatial_shape[i])

  ```

  And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:

  ```

  pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + ((kernel_spatial_shape[i]
  - 1) * dilations[i] + 1) - input_spatial_shape[i]

  ```

  The output of each pooling window is maximum number of elements exclude pad.

  '
attributes:
- name: auto_pad
  description: auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where
    default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER
    mean pad the input so that the output spatial size match the input.In case of
    odd number add the extra padding at the end for SAME_UPPER and at the beginning
    for SAME_LOWER. VALID mean no padding.
  type: AttrType.STRING
  required: false
  default_value: NOTSET
- name: ceil_mode
  description: Whether to use ceil or floor (default) to compute the output shape.
  type: AttrType.INT
  required: false
  default_value: 0
- name: dilations
  description: Dilation value along each spatial axis of filter. If not present, the
    dilation defaults to 1 along each spatial axis.
  type: AttrType.INTS
  required: false
  default_value: null
- name: kernel_shape
  description: The size of the kernel along each axis.
  type: AttrType.INTS
  required: true
  default_value: null
- name: pads
  description: Padding for the beginning and ending along each spatial axis, it can
    take any value greater than or equal to 0. The value represent the number of pixels
    added to the beginning and end part of the corresponding axis. `pads` format should
    be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number
    of pixels added at the beginning of axis `i` and xi_end, the number of pixels
    added at the end of axis `i`. This attribute cannot be used simultaneously with
    auto_pad attribute. If not present, the padding defaults to 0 along start and
    end of each spatial axis.
  type: AttrType.INTS
  required: false
  default_value: null
- name: storage_order
  description: The storage order of the tensor. 0 is row major, and 1 is column major.
  type: AttrType.INT
  required: false
  default_value: 0
- name: strides
  description: Stride along each spatial axis. If not present, the stride defaults
    to 1 along each spatial axis.
  type: AttrType.INTS
  required: false
  default_value: null
inputs:
- name: X
  type_str: T
  description: Input data tensor from the previous operator; dimensions for image
    case are (N x C x H x W), where N is the batch size, C is the number of channels,
    and H and W are the height and the width of the data. For non image case, the
    dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.
    Optionally, if dimension denotation is in effect, the operation expects the input
    data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL,
    DATA_FEATURE, DATA_FEATURE ...].
  min_arity: 1
  tags: []
outputs:
- name: Y
  type_str: T
  description: Output data tensor from average or max pooling across the input tensor.
    Dimensions will vary based on various kernel, stride, and pad sizes. Floor value
    of the dimension is used
  min_arity: 1
  tags: []
- name: Indices
  type_str: I
  description: Indices tensor from max pooling across the input tensor. The dimensions
    of indices are the same as output tensor. The values in indices of are the indices
    of the selected values during pooling. The indices are computed as flatten 1-D
    tensor, and the indices do not consider padding. So the values in indices are
    in [0, N x C x D1 x ... x Dn).
  min_arity: 1
  tags:
  - optional
type_constraints:
- type_param_str: T
  description: Constrain input and output types to float tensors.
  allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
- type_param_str: I
  description: Constrain index tensor to int64
  allowed_type_strs:
  - tensor(int64)
support_level: COMMON
deprecated: false
