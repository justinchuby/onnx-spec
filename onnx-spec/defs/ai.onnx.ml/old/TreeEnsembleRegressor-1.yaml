domain: ai.onnx.ml
name: TreeEnsembleRegressor
since_version: 1
min_input: 1
max_input: 1
min_output: 1
max_output: 1
doc: |-
  Tree Ensemble regressor.  Returns the regressed values for each input in N.

  All args with nodes_ are fields of a tuple of tree nodes, and
  it is assumed they are the same length, and an index i will decode the
  tuple across these inputs.  Each node id can appear only once
  for each tree id.

  All fields prefixed with target_ are tuples of votes at the leaves.

  A leaf may have multiple votes, where each vote is weighted by
  the associated target_weights index.

  All trees must have their node ids start at 0 and increment by 1.

  Mode enum is BRANCH_LEQ, BRANCH_LT, BRANCH_GTE, BRANCH_GT, BRANCH_EQ, BRANCH_NEQ, LEAF
attributes:
  - name: aggregate_function
    description: >-
      Defines how to aggregate leaf values within a target. 

      One of 'AVERAGE,' 'SUM,' 'MIN,' 'MAX.'
    type: STRING
    required: false
    default_value: SUM
  - name: base_values
    description: >-
      Base values for classification, added to final class score; the size must be
      the same as the classes or can be left unassigned (assumed 0)
    type: FLOATS
    required: false
  - name: n_targets
    description: >-
      The total number of targets.
    type: INT
    required: false
  - name: nodes_falsenodeids
    description: >-
      Child node if expression is false
    type: INTS
    required: false
  - name: nodes_featureids
    description: >-
      Feature id for each node.
    type: INTS
    required: false
  - name: nodes_hitrates
    description: >-
      Popularity of each node, used for performance and may be omitted.
    type: FLOATS
    required: false
  - name: nodes_missing_value_tracks_true
    description: >-
      For each node, define what to do in the presence of a NaN: use the 'true' (if
      the attribute value is 1) or 'false' (if the attribute value is 0) branch based
      on the value in this array.

      This attribute may be left undefined and the default value is false (0) for
      all nodes.
    type: INTS
    required: false
  - name: nodes_modes
    description: >-
      The node kind, that is, the comparison to make at the node. There is no comparison
      to make at a leaf node.

      One of 'BRANCH_LEQ', 'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ',
      'LEAF'
    type: STRINGS
    required: false
  - name: nodes_nodeids
    description: >-
      Node id for each node. Node ids must restart at zero for each tree and increase
      sequentially.
    type: INTS
    required: false
  - name: nodes_treeids
    description: >-
      Tree id for each node.
    type: INTS
    required: false
  - name: nodes_truenodeids
    description: >-
      Child node if expression is true
    type: INTS
    required: false
  - name: nodes_values
    description: >-
      Thresholds to do the splitting on for each node.
    type: FLOATS
    required: false
  - name: post_transform
    description: >-
      Indicates the transform to apply to the score. 

      One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
    type: STRING
    required: false
    default_value: NONE
  - name: target_ids
    description: >-
      The index of the target that each weight is for
    type: INTS
    required: false
  - name: target_nodeids
    description: >-
      The node id of each weight
    type: INTS
    required: false
  - name: target_treeids
    description: >-
      The id of the tree that each node is in.
    type: INTS
    required: false
  - name: target_weights
    description: >-
      The weight for each target
    type: FLOATS
    required: false
inputs:
  - name: X
    type_str: T
    description: Input of shape [N,F]
    min_arity: 1
    tags: []
outputs:
  - name: Y
    type_str: tensor(float)
    description: N classes
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T
    description: The input type must be a tensor of a numeric type.
    allowed_type_strs:
      - tensor(float)
      - tensor(double)
      - tensor(int64)
      - tensor(int32)
support_level: COMMON
deprecated: false
