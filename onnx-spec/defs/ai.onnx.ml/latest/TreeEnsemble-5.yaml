domain: ai.onnx.ml
name: TreeEnsemble
since_version: 5
min_input: 1
max_input: 1
min_output: 1
max_output: 1
doc: |-
  Tree Ensemble operator.  Returns the regressed values for each input in a batch.
  Inputs have dimensions `[N, F]` where `N` is the input batch size and `F` is the number of input features.
  Outputs have dimensions `[N, num_targets]` where `N` is the batch size and `num_targets` is the number of targets, which is a configurable attribute.

  The encoding of this attribute is split along interior nodes and the leaves of the trees. Notably, attributes with the prefix `nodes_*` are associated with interior nodes, and attributes with the prefix `leaf_*` are associated with leaves.
  The attributes `nodes_*` must all have the same length and encode a sequence of tuples, as defined by taking all the `nodes_*` fields at a given position.

  All fields prefixed with `leaf_*` represent tree leaves, and similarly define tuples of leaves and must have identical length.

  This operator can be used to implement both the previous `TreeEnsembleRegressor` and `TreeEnsembleClassifier` nodes.
  The `TreeEnsembleRegressor` node maps directly to this node and requires changing how the nodes are represented.
  The `TreeEnsembleClassifier` node can be implemented by adding a `ArgMax` node after this node to determine the top class.
  To encode class labels, a `LabelEncoder` or `GatherND` operator may be used.
attributes:
  - name: aggregate_function
    description: >-
      Defines how to aggregate leaf values within a target. 

      One of 'AVERAGE' (0) 'SUM' (1) 'MIN' (2) 'MAX (3) defaults to 'SUM' (1)
    type: INT
    required: false
    default_value: 1
  - name: leaf_targetids
    description: >-
      The index of the target that this leaf contributes to (this must be in range
      `[0, n_targets)`).
    type: INTS
    required: true
  - name: leaf_weights
    description: >-
      The weight for each leaf.
    type: TENSOR
    required: true
  - name: membership_values
    description: >-
      Members to test membership of for each set membership node. List all of the
      members to test again in the order that the 'BRANCH_MEMBER' mode appears in
      `node_modes`, delimited by `NaN`s. Will have the same number of sets of values
      as nodes with mode 'BRANCH_MEMBER'. This may be omitted if the node doesn't
      contain any 'BRANCH_MEMBER' nodes.
    type: TENSOR
    required: false
  - name: n_targets
    description: >-
      The total number of targets.
    type: INT
    required: false
  - name: nodes_falseleafs
    description: >-
      1 if false branch is leaf for each node and 0 if an interior node. To represent
      a tree that is a leaf (only has one node), one can do so by having a single
      `nodes_*` entry with true and false branches referencing the same `leaf_*` entry
    type: INTS
    required: true
  - name: nodes_falsenodeids
    description: >-
      If `nodes_falseleafs` is false at an entry, this represents the position of
      the false branch node. This position can be used to index into a `nodes_*` entry.
      If `nodes_falseleafs` is false, it is an index into the leaf_* attributes.
    type: INTS
    required: true
  - name: nodes_featureids
    description: >-
      Feature id for each node.
    type: INTS
    required: true
  - name: nodes_hitrates
    description: >-
      Popularity of each node, used for performance and may be omitted.
    type: TENSOR
    required: false
  - name: nodes_missing_value_tracks_true
    description: >-
      For each node, define whether to follow the true branch (if attribute value
      is 1) or false branch (if attribute value is 0) in the presence of a NaN input
      feature. This attribute may be left undefined and the default value is false
      (0) for all nodes.
    type: INTS
    required: false
  - name: nodes_modes
    description: >-
      The comparison operation performed by the node. This is encoded as an enumeration
      of 0 ('BRANCH_LEQ'), 1 ('BRANCH_LT'), 2 ('BRANCH_GTE'), 3 ('BRANCH_GT'), 4 ('BRANCH_EQ'),
      5 ('BRANCH_NEQ'), and 6 ('BRANCH_MEMBER'). Note this is a tensor of type uint8.
    type: TENSOR
    required: true
  - name: nodes_splits
    description: >-
      Thresholds to do the splitting on for each node with mode that is not 'BRANCH_MEMBER'.
    type: TENSOR
    required: true
  - name: nodes_trueleafs
    description: >-
      1 if true branch is leaf for each node and 0 an interior node. To represent
      a tree that is a leaf (only has one node), one can do so by having a single
      `nodes_*` entry with true and false branches referencing the same `leaf_*` entry
    type: INTS
    required: true
  - name: nodes_truenodeids
    description: >-
      If `nodes_trueleafs` is false at an entry, this represents the position of the
      true branch node. This position can be used to index into a `nodes_*` entry.
      If `nodes_trueleafs` is false, it is an index into the leaf_* attributes.
    type: INTS
    required: true
  - name: post_transform
    description: >-
      Indicates the transform to apply to the score. 

      One of 'NONE' (0), 'SOFTMAX' (1), 'LOGISTIC' (2), 'SOFTMAX_ZERO' (3) or 'PROBIT'
      (4), defaults to 'NONE' (0)
    type: INT
    required: false
    default_value: 0
  - name: tree_roots
    description: >-
      Index into `nodes_*` for the root of each tree. The tree structure is derived
      from the branching of each node.
    type: INTS
    required: true
inputs:
  - name: X
    type_str: T
    description: Input of shape [Batch Size, Number of Features]
    min_arity: 1
    tags: []
outputs:
  - name: Y
    type_str: T
    description: Output of shape [Batch Size, Number of targets]
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T
    description: The input type must be a tensor of a numeric type.
    allowed_type_strs:
      - tensor(float)
      - tensor(double)
      - tensor(float16)
support_level: COMMON
deprecated: false
