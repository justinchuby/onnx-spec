domain: ai.onnx.ml
name: DictVectorizer
since_version: 1
min_input: 1
max_input: 1
min_output: 1
max_output: 1
doc: |-
  Uses an index mapping to convert a dictionary to an array.

  Given a dictionary, each key is looked up in the vocabulary attribute corresponding to
  the key type. The index into the vocabulary array at which the key is found is then
  used to index the output 1-D tensor 'Y' and insert into it the value found in the dictionary 'X'.

  The key type of the input map must correspond to the element type of the defined vocabulary attribute.
  Therefore, the output array will be equal in length to the index mapping vector parameter.
  All keys in the input dictionary must be present in the index mapping vector.
  For each item in the input dictionary, insert its value in the output array.
  Any keys not present in the input dictionary, will be zero in the output array.

  For example: if the ``string_vocabulary`` parameter is set to ``["a", "c", "b", "z"]``,
  then an input of ``{"a": 4, "c": 8}`` will produce an output of ``[4, 8, 0, 0]``.
attributes:
  - name: int64_vocabulary
    description: >-
      An integer vocabulary array.

      One and only one of the vocabularies must be defined.
    type: INTS
    required: false
  - name: string_vocabulary
    description: >-
      A string vocabulary array.

      One and only one of the vocabularies must be defined.
    type: STRINGS
    required: false
inputs:
  - name: X
    type_str: T1
    description: A dictionary.
    min_arity: 1
    tags: []
outputs:
  - name: Y
    type_str: T2
    description: A 1-D tensor holding values from the input dictionary.
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T1
    description: The input must be a map from strings or integers to either 
      strings or a numeric type. The key and value types cannot be the same.
    allowed_type_strs:
      - map(string, int64)
      - map(int64, string)
      - map(int64, float)
      - map(int64, double)
      - map(string, float)
      - map(string, double)
  - type_param_str: T2
    description: The output will be a tensor of the value type of the input map.
      It's shape will be [1,C], where C is the length of the input dictionary.
    allowed_type_strs:
      - tensor(int64)
      - tensor(float)
      - tensor(double)
      - tensor(string)
support_level: COMMON
deprecated: false
