domain: ai.onnx.ml
name: TreeEnsembleClassifier
since_version: 5
min_input: 1
max_input: 1
min_output: 2
max_output: 2
doc: |-
  This operator is DEPRECATED. Please use TreeEnsemble with provides similar functionality.
  In order to determine the top class, the ArgMax node can be applied to the output of TreeEnsemble.
  To encode class labels, use a LabelEncoder operator.
  Tree Ensemble classifier. Returns the top class for each of N inputs.

  The attributes named 'nodes_X' form a sequence of tuples, associated by
  index into the sequences, which must all be of equal length. These tuples
  define the nodes.

  Similarly, all fields prefixed with 'class_' are tuples of votes at the leaves.
  A leaf may have multiple votes, where each vote is weighted by
  the associated class_weights index.

  One and only one of classlabels_strings or classlabels_int64s
  will be defined. The class_ids are indices into this list.
  All fields ending with <i>_as_tensor</i> can be used instead of the
  same parameter without the suffix if the element type is double and not float.
attributes:
  - name: base_values
    description: >-
      Base values for classification, added to final class score; the size must be
      the same as the classes or can be left unassigned (assumed 0)
    type: FLOATS
    required: false
  - name: base_values_as_tensor
    description: >-
      Base values for classification, added to final class score; the size must be
      the same as the classes or can be left unassigned (assumed 0)
    type: TENSOR
    required: false
  - name: class_ids
    description: >-
      The index of the class list that each weight is for.
    type: INTS
    required: false
  - name: class_nodeids
    description: >-
      node id that this weight is for.
    type: INTS
    required: false
  - name: class_treeids
    description: >-
      The id of the tree that this node is in.
    type: INTS
    required: false
  - name: class_weights
    description: >-
      The weight for the class in class_id.
    type: FLOATS
    required: false
  - name: class_weights_as_tensor
    description: >-
      The weight for the class in class_id.
    type: TENSOR
    required: false
  - name: classlabels_int64s
    description: >-
      Class labels if using integer labels.

      One and only one of the 'classlabels_*' attributes must be defined.
    type: INTS
    required: false
  - name: classlabels_strings
    description: >-
      Class labels if using string labels.

      One and only one of the 'classlabels_*' attributes must be defined.
    type: STRINGS
    required: false
  - name: nodes_falsenodeids
    description: >-
      Child node if expression is false.
    type: INTS
    required: false
  - name: nodes_featureids
    description: >-
      Feature id for each node.
    type: INTS
    required: false
  - name: nodes_hitrates
    description: >-
      Popularity of each node, used for performance and may be omitted.
    type: FLOATS
    required: false
  - name: nodes_hitrates_as_tensor
    description: >-
      Popularity of each node, used for performance and may be omitted.
    type: TENSOR
    required: false
  - name: nodes_missing_value_tracks_true
    description: >-
      For each node, define what to do in the presence of a missing value: if a value
      is missing (NaN), use the 'true' or 'false' branch based on the value in this
      array.

      This attribute may be left undefined, and the default value is false (0) for
      all nodes.
    type: INTS
    required: false
  - name: nodes_modes
    description: >-
      The node kind, that is, the comparison to make at the node. There is no comparison
      to make at a leaf node.

      One of 'BRANCH_LEQ', 'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ',
      'LEAF'
    type: STRINGS
    required: false
  - name: nodes_nodeids
    description: >-
      Node id for each node. Ids may restart at zero for each tree, but it not required
      to.
    type: INTS
    required: false
  - name: nodes_treeids
    description: >-
      Tree id for each node.
    type: INTS
    required: false
  - name: nodes_truenodeids
    description: >-
      Child node if expression is true.
    type: INTS
    required: false
  - name: nodes_values
    description: >-
      Thresholds to do the splitting on for each node.
    type: FLOATS
    required: false
  - name: nodes_values_as_tensor
    description: >-
      Thresholds to do the splitting on for each node.
    type: TENSOR
    required: false
  - name: post_transform
    description: >-
      Indicates the transform to apply to the score. 
       One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'
    type: STRING
    required: false
    default_value: NONE
inputs:
  - name: X
    type_str: T1
    description: Input of shape [N,F]
    min_arity: 1
    tags: []
outputs:
  - name: Y
    type_str: T2
    description: N, Top class for each point
    min_arity: 1
    tags: []
  - name: Z
    type_str: tensor(float)
    description: The class score for each class, for each point, a tensor of 
      shape [N,E].
    min_arity: 1
    tags: []
type_constraints:
  - type_param_str: T1
    description: The input type must be a tensor of a numeric type.
    allowed_type_strs:
      - tensor(float)
      - tensor(double)
      - tensor(int64)
      - tensor(int32)
  - type_param_str: T2
    description: The output type will be a tensor of strings or integers, 
      depending on which of the classlabels_* attributes is used.
    allowed_type_strs:
      - tensor(string)
      - tensor(int64)
support_level: COMMON
deprecated: true
