attributes:
- default_value: 9.999999747378752e-06
  description: The epsilon value to use to avoid division by zero.
  name: epsilon
  required: false
  type: AttrType.FLOAT
- default_value: null
  description: The number of groups of channels. It should be a divisor of the number
    of channels `C`.
  name: num_groups
  required: true
  type: AttrType.INT
- default_value: 1
  description: The floating-point precision used in stage one of the computation.
  name: stash_type
  required: false
  type: AttrType.INT
deprecated: false
doc: '

  A GroupNormalization function. Carries out group normalization as described in

  the paper https://arxiv.org/abs/1803.08494


  This operator transforms input according to

  ```

  y = scale * (x - mean) / sqrt(variance + epsilon) + bias,

  ```

  where the mean and variance are computed per instance per group of channels, and

  `scale` and `bias` should be specified for each group of channels. The number of

  groups `num_groups` should be divisible by the number of channels so that there
  are

  an equal number of channels per group.


  The overall computation has two stages: the first stage normalizes the elements
  to

  have zero mean and unit variance for each instance in each group, and the second

  stage scales and shifts the results of the first stage. The floating-point precision

  used in the first stage is determined by the `stash_type` attribute. For example,

  if `stash_type` is 1, the operator casts all input variables to 32-bit float,

  performs the computation, and finally casts the normalized results back to the

  original type of `X`. The second stage does not depend on `stash_type`.


  When the number of groups is the same as the number of channels, this operator is

  equivalent to InstanceNormalization. When there is only one group, this operator

  is equivalent to LayerNormalization.

  '
domain: ''
inputs:
- description: Input data tensor. Dimensions for image cases are `(N x C x H x W)`,
    where `N` is the batch size, `C` is the number of channels, and `H` and `W` are
    the height and width of the data. Statistics are computed for every group of channels
    over `C`, `H`, and `W`. For non-image cases, the dimensions are in the form of
    `(N x C x D1 x D2 ... Dn)`.
  min_arity: 1
  name: X
  tags:
  - differentiable
  type_str: T
- description: Scale tensor of shape `(C)`.
  min_arity: 1
  name: scale
  tags:
  - differentiable
  type_str: T
- description: Bias tensor of shape `(C)`.
  min_arity: 1
  name: bias
  tags:
  - differentiable
  type_str: T
max_input: 3
max_output: 1
min_input: 3
min_output: 1
name: GroupNormalization
outputs:
- description: The output tensor of the same shape as `X`.
  min_arity: 1
  name: Y
  tags:
  - differentiable
  type_str: T
since_version: 21
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(bfloat16)
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  description: Constrain input and output types to float tensors.
  type_param_str: T
