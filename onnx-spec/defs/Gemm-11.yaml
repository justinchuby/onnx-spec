attributes:
- default_value: 1.0
  description: Scalar multiplier for the product of input tensors A * B.
  name: alpha
  required: false
  type: AttrType.FLOAT
- default_value: 1.0
  description: Scalar multiplier for input tensor C.
  name: beta
  required: false
  type: AttrType.FLOAT
- default_value: 0
  description: Whether A should be transposed
  name: transA
  required: false
  type: AttrType.INT
- default_value: 0
  description: Whether B should be transposed
  name: transB
  required: false
  type: AttrType.INT
deprecated: false
doc: 'General Matrix multiplication:

  https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3


  A'' = transpose(A) if transA else A


  B'' = transpose(B) if transB else B


  Compute Y = alpha * A'' * B'' + beta * C, where input tensor A has shape (M, K)
  or (K, M),

  input tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape
  (M, N),

  and output tensor Y has shape (M, N). A will be transposed before doing the

  computation if attribute transA is non-zero, same for B and transB.

  This operator supports **unidirectional broadcasting** (tensor C should be unidirectional
  broadcastable to tensor A * B); for more details please check [the doc](Broadcasting.md).

  This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details
  about the representation of optional arguments. An empty string may be used in the
  place of an actual argument''s name to indicate a missing argument. Trailing optional
  arguments (those not followed by an argument that is present) may also be simply
  omitted.

  '
domain: ''
inputs:
- description: Input tensor A. The shape of A should be (M, K) if transA is 0, or
    (K, M) if transA is non-zero.
  min_arity: 1
  name: A
  tags: []
  type_str: T
- description: Input tensor B. The shape of B should be (K, N) if transB is 0, or
    (N, K) if transB is non-zero.
  min_arity: 1
  name: B
  tags: []
  type_str: T
- description: Optional input tensor C. If not specified, the computation is done
    as if C is a scalar 0. The shape of C should be unidirectional broadcastable to
    (M, N).
  min_arity: 1
  name: C
  tags:
  - optional
  type_str: T
max_input: 3
max_output: 1
min_input: 2
min_output: 1
name: Gemm
outputs:
- description: Output tensor of shape (M, N).
  min_arity: 1
  name: Y
  tags: []
  type_str: T
since_version: 11
support_level: SupportType.COMMON
type_constraints:
- allowed_type_strs:
  - tensor(float16)
  - tensor(float)
  - tensor(double)
  - tensor(uint32)
  - tensor(uint64)
  - tensor(int32)
  - tensor(int64)
  description: Constrain input and output types to float/int tensors.
  type_param_str: T
